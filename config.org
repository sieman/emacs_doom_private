#+TITLE: Einstellungen Configuration
* Einstellungen :settings:
** Darstellung :appearance:
#+begin_src emacs-lisp
(display-time-mode t)
(setq display-time-24hr-format t)
(setq display-line-numbers-type nil)
(load! "sim-calendar")
(load! "~/.emacs.secrets")
;; Theme related things
(load! "+themes")
;; (custom-set-faces!
;;   '(fringe :background "#FFFFFF")
;;   '(solaire-fringe-face :background "#FFFFFF"))
(after! beacon
  (beacon-mode t)
  (setq beacon-color "#9a37ff"))

#+end_src
** Editor Erweiterungen :editor:
*** Rechtschreibprüfung :spell:checking:
#+begin_src emacs-lisp
(setq ispell-dictionary "de_DE")
(setq ispell-hunspell-dict-paths-alist
      '(("de_DE" "~/Library/Spelling/de_DE.aff")))
#+end_src
*** Tastaturlayout :keyboard:layout:
#+begin_src emacs-lisp
(load! "+neo-layout.el")
(load! "+modifier.el")
#+end_src

*** Smartparent
#+begin_src emacs-lisp
(after! smartparens
  (smartparens-global-mode -1)
  ;; (smartparens-mode -1)
  (turn-off-smartparens-mode)
  )
#+end_src
*** Multiple Cursors
#+begin_src emacs-lisp
(after! multiple-cursors
  (setq! mc/list-file "~/.e/sieman/mc-lists.el")
  )
#+end_src
*** Ivy is a generic completion mechanism for Emacs.
#+begin_src emacs-lisp
(after! ivy
  (ido-mode -1)
  (global-unset-key (kbd "s-x"))
  (general-define-key "s-x" 'kill-region))
#+end_src
** Modus Anwendungen :settings:modes:
*** org-mode :org:
#+begin_src emacs-lisp
;; (with-eval-after-load 'org
;; (add-to-list 'sp-ignore-modes-list #'org-mode))

;; (with-eval-after-load 'org-agenda
;; (add-to-list 'sp-ignore-modes-list #'org-agenda-mode))
(load! "+org")

#+end_src

*** dired
#+begin_src emacs-lisp
(after! dired
  (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))
  (put 'dired-find-alternate-file 'disabled nil))
#+end_src

* Funktionen
Hier stehen Funktionen, die für die Tastenkürzel verwendet werden.
** Ist das Packet das, das ich gebrauche?
(if (require 'tee nil 'noerror)
(message "Ja ist installiert")
(message "Nein ist nicht installiert"))

#+begin_src emacs-lisp
(if (require 'general nil 'noerror)
    (message "neo-keybinding")
  (package-install 'general))

(defun nk/check-package (name fct)
  "Is package installed then executes fct otherwise give a message."
  (interactive)

  (if (require  name nil 'noerror)
      (funcall-interactively fct)
    (message (concat "neo-keybinding missing package: " (symbol-name name)))))
#+end_src

** Upper Lower Case Toggle
Toggle case for word at caret or selected block
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Case.html][Toggle Case Description]]

#+Begin_src emacs-lisp
(defun xah-toggle-letter-case ()
  "Toggle the letter case of current word or text selection.
     Always cycle in this order: Init Caps, ALL CAPS, all lower.
     URL `http://ergoemacs.org/emacs/modernization_upcase-word.html'
     Version 2019-11-24"
  (interactive)
  (let (
        (deactivate-mark nil)
        $p1 $p2)
    (if (use-region-p)
        (setq $p1 (region-beginning) $p2 (region-end))
      (save-excursion
        (skip-chars-backward "0-9A-Za-z")
        (setq $p1 (point))
        (skip-chars-forward "0-9A-Za-z")
        (setq $p2 (point))))
    (when (not (eq last-command this-command))
      (put this-command 'state 0))
    (cond
     ((equal 0 (get this-command 'state))
      (upcase-initials-region $p1 $p2)
      (put this-command 'state 1))
     ((equal 1 (get this-command 'state))
      (upcase-region $p1 $p2)
      (put this-command 'state 2))
     ((equal 2 (get this-command 'state))
      (downcase-region $p1 $p2)
      (put this-command 'state 0)))))
#+end_src
** Duplicate Line Or Region

#+begin_src emacs-lisp
(defun duplicate-line-or-region (&optional n)
  "Duplicate current line, or region if active.
      With argument N, make N copies.
      With negative N, comment out original line and use the absolute value."
  (interactive "*p")
  (let ((use-region (use-region-p)))
    (save-excursion
      (let ((text (if use-region        ;Get region if active, otherwise line
                      (buffer-substring (region-beginning) (region-end))
                    (prog1 (thing-at-point 'line)
                      (end-of-line)
                      (if (< 0 (forward-line 1)) ;Go to beginning of next line, or make a new one
                          (newline))))))
        (dotimes (i (abs (or n 1)))     ;Insert N times, or once if not specified
          (insert text))))
    (if use-region nil                  ;Only if we're working with a line (not a region)
      (let ((pos (- (point) (line-beginning-position)))) ;Save column
        (if (> 0 n)                             ;Comment out original with negative arg
            (comment-region (line-beginning-position) (line-end-position)))
        (forward-line 1)
        (forward-char pos)))))

#+end_src

** Color Themes
#+begin_src emacs-lisp
(defun nk/after-theme-changed ()
  "Custom face settings after theme changed."
  (interactive)
  (org-bullets-mode nil)
  (org-bullets-mode t)
  (set-face-attribute 'mode-line nil :font "JetBrains Mono 12")
  (custom-set-faces
   '(show-paren-match ((t (:background "red" :foreground "blue" :inverse-video t :weight bold))))
   '(region ((t (:foreground "#f1c40f" :background "#2c3e50" :inverse-video t))))
   `(cursor ((t (:foreground "white" :background "red"))))
   )
  (setq doom-modeline-height 20)
  (message "nk/after-theme-changed done")
  )

(defun disable-all-custom-themes ()
  "Disable all themes and then load a single theme interactively."
  (interactive)
  (while custom-enabled-themes
    (disable-theme (car custom-enabled-themes))) )
#+end_src
** Goto Line
- =M-g M-g   = goto line number and shows line numbers
  #+begin_src emacs-lisp
(defun goto-line-with-feedback ()
  "Show line numbers temporarily, while prompting for the line number input"
  (interactive)
  (unwind-protect
      (progn
        (linum-mode 1)
        (call-interactively 'goto-line))
    (linum-mode -1)))
  #+end_src
** TODO Zentrierter Schreiben
#+begin_src emacs-lisp
;; (defun nk/centered
;;     (interactive)
;;   (bound-and-true-p centered-window-mode)
;;   (centered-window-mode)
;;   )
#+end_src
* Tastenkürzel Control Meta

** Editing
*** TODO Auto Complete
#+BEGIN_SRC emacs-lisp
;; (global-unset-key (kbd "M-SPC")) ; now used as set-mark-command
#+end_src
*** Move Text
#+begin_src emacs-lisp
(nk/check-package 'move-text (lambda () (general-define-key
                                         "M-S-<up>"  'move-text-up
                                         "M-S-<down>"  'move-text-down)))
#+end_src
*** Comment line and region
- =C-S-c = Comment or uncomment current line.
- =C-A-c = Comment or uncomment each line in the region.
  #+begin_src emacs-lisp
(global-unset-key (kbd "C-x C-;"))

(general-define-key
 "C-S-c" 'comment-line
 "C-A-c" 'comment-or-uncomment-region)
  #+end_src
*** Spell Checking
#+begin_src emacs-lisp
(nk/check-package 'flyspell-correct
                  (lambda () (general-define-key "C-M-," 'flyspell-correct-wrapper)))
#+end_src
** General
*** Run A Command By Name
- =M-x     =
- =C-xm    =
- =C-x C-m =
  #+begin_src emacs-lisp
;; Smart M-x
;; (nk/check-package 'smex (lambda ()  (general-define-key "M-x" 'smex
;;                                                        "\C-xm" 'smex
;;                                                        "M-X" 'smex-major-mode-commands
;;                                                        "\C-x\C-m" 'smex-major-mode-commands
;;                                                        "C-c C-c M-x" 'execute-extended-command)))
(general-define-key "M-x" 'smex
                    "\C-xm" 'execute-extended-command
                    "M-X" 'execute-extended-command
                    "\C-x\C-m" 'execute-extended-command
                    "s-A" 'execute-extended-command
                    )
  #+end_src
*** TODO Recenter
*** Open Files in Buffer and Project Management
#+begin_src emacs-lisp
(general-define-key
 "C-x f" 'recentf-ido-find-file
 "C-x F r" 'recentf-ido-find-file
 "C-x F w" 'ido-find-file-other-window
 )

(general-define-key
 "C-x F p" 'projectile-command-map
 "C-c p" 'projectile-command-map)
#+end_src
*** Relly Quite
#+begin_src emacs-lisp
(global-unset-key (kbd "C-x C-c"))
(general-define-key  "C-x r q" 'save-buffers-kill-terminal)
#+end_src
** Appearance
*** Text Scale remapping keybindings
#+BEGIN_SRC emacs-lisp
(general-define-key "C-x C-A-b" 'text-scale-increase
                    "C-x C-A-t" 'text-scale-decrease)
#+END_SRC
*** View Mode
#+begin_src emacs-lisp
(nk/check-package 'olivetti (lambda () (general-define-key "<f7>" 'olivetti-mode)))
#+end_src
** TODO Usage Search
** Navigation
*** Move more quickly
#+begin_src emacs-lisp
(global-set-key (kbd "C-S-<down>")
                (lambda ()
                  (interactive)
                  (ignore-errors (next-line 5))))


(global-set-key (kbd "C-S-<up>")
                (lambda ()
                  (interactive)
                  (ignore-errors (previous-line 5))))

(global-set-key (kbd "C-S-<right>")
                (lambda ()
                  (interactive)
                  (ignore-errors (forward-char 5))))

(global-set-key (kbd "C-S-<left>")
                (lambda ()
                  (interactive)
                  (ignore-errors (backward-char 5))))

(global-set-key (kbd "C-S-a")
                (lambda ()
                  (interactive)
                  (ignore-errors (next-line 5))))

(global-set-key (kbd "C-S-l")
                (lambda ()
                  (interactive)
                  (ignore-errors (previous-line 5))))

(global-set-key (kbd "C-S-e")
                (lambda ()
                  (interactive)
                  (ignore-errors (forward-char 5))))

(global-set-key (kbd "C-S-i")
                (lambda ()
                  (interactive)
                  (ignore-errors (backward-char 5))))


#+end_src


*** File Structure
=C-<F12>  =
Shows quick jumping points of the structure in the file.
#+begin_src emacs-lisp
(general-define-key "C-<f12>" 'imenu)
(general-define-key "C-S-<f12>" 'imenu-anywhere)
#+end_src
*** Switch buffer
- =s-e     =
- =C-x C-b =
- =C-x b   =
  Switch to another buffer.
  #+begin_src emacs-lisp
(global-unset-key (kbd "s-e"))
(general-define-key "s-e" 'ido-switch-buffer
                    "C-x C-b" 'ibuffer
                    "C-x b" 'ido-switch-buffer)
  #+end_src
*** Next highlighted error
#+begin_src emacs-lisp
(general-define-key "<f5>" 'next-error)
#+end_src
*** Go Back/Foward
- =C-x <left>    = Go Back current buffer
- =C-x <right>   = Go Forward current buffer
- =C-x C-<left>  = Go Back over buffers
- =C-x C-<right> = Go Forward over buffers

*** Jump to other Window
- =A-S-<up>    = jump a window up
- =A-S-<down>  = jump a window down
- =A-S-<left>  = jump a window left
- =A-S-<right> = jump a window right
  #+begin_src emacs-lisp
(nk/check-package 'windmove (lambda ()
                              (general-define-key "<A-S-right>" 'windmove-right
                                                  "<A-S-left>" 'windmove-left
                                                  "<A-S-up>" 'windmove-up
                                                  "<A-S-down>" 'windmove-down) ))
  #+end_src

*** New Window
#+begin_src emacs-lisp
(defun split-window-right-and-move-there-dammit ()
  (interactive)
  (split-window-right)
  (windmove-right))

(global-set-key (kbd "C-x 3") 'split-window-right-and-move-there-dammit)
#+end_src
*** Macro Step jumps into source code (lisp)
Zeigt den Inhalt von elip Funktionen.
#+BEGIN_SRC emacs-lisp
(if (require 'macrostep nil 'noerror)
    (require 'macrostep)
  (message "neo-keybinding missing package: macrostep"))
#+END_SRC
*** Tool Windows
**** Neo Tree lists files
See documentation and [[https://github.com/jaypei/emacs-neotree][key-bindings]].
#+BEGIN_SRC emacs-lisp
(nk/check-package 'neotree (lambda ()
                             (general-define-key "s-1" 'neotree-toggle)))
#+END_SRC
*** Goto Line
- =M-g M-g   = goto line number and shows line numbers
  #+begin_src emacs-lisp
(global-set-key [remap goto-line] 'goto-line-with-feedback)
  #+end_src

** Search Replace Highlight
*** Highlight Symbols Phrases ...
- =F6   = Highlight a Symbol under the cursor
- =C-F6 = Highlight a Search Pattern with custome color
  #+begin_src emacs-lisp
(general-define-key "<f10>" 'highlight-symbol-at-point
                    "C-<f10>" 'highlight-phrase)
  #+end_src
*** Searching
- =C-S   =
  #+begin_src emacs-lisp
(nk/check-package 'swiper (lambda ()(general-define-key
                                     "C-S-s" 'swiper-isearch
                                     "C-S-r" 'swiper-isearch-backward
                                     "C-7" 'swiper-mc) ))
  #+end_src
** Live Templates
** Version Control System
** Refactoring
** Debugging
** Compile and Run

** Magnars
*** Files

-  =C-x C-f= Open a file. Starts in the current directory
-  =C-x f  = Open a recently visited file
-  =C-x o  = Open a file in the current project (based on .git ++)
-  =C-x C-s= Save this file
-  =C-x C-w= Save as ...
-  =C-x C-j= Jump to this files' current directory
-  =C-x b  = Switch to another open file (buffer)
-  =C-x C-b= List all open files (buffers)

*** Cut copy and paste

- =C-space= Start marking stuff. C-g to cancel.
- =C-w    = Cut (aka kill)
- =C-k    = Cut till end of line
- =M-w    = Copy
- =C-y    = Paste (aka yank)
- =M-y    = Cycle last paste through previous kills
- =C-x C-y= Choose what to paste from previous kills
- =C-@    = Mark stuff quickly. Press multiple times

*** General

-  =C-g    = Quit out of whatever mess you've gotten yourself into
-  =M-x    = Run a command by name
-  =C-.    = Autocomplete
-  =C-_    = Undo
-  =M-_    = Redo
-  =C-x u  = Show the undo-tree
-  =C-x m  = Open magit. It's a magical git interface for emacs

*** Navigation

-  =C-arrow= Move past words/paragraphs
-  =C-a    = Go to start of line
-  =C-e    = Go to end of line
-  =M-g M-g= Go to line number
-  =C-x C-i= Go to symbol
-  =C-s    = Search forward. Press =C-s= again to go further.
-  =C-r    = Search backward. Press =C-r= again to go further.

*** Window management

-  =C-x 0  = Close this window
-  =C-x 1  = Close other windows
-  =C-x 2  = Split window horizontally
-  =C-x 3  = Split window vertically
-  =S-arrow= Jump to window to the left/right/up/down

* Super (or Hyper) Keybinding
** Default super binding to rethinking

|            |                                         |                         |
| <s-f11>    | ??                                      |                         |
| <s-kp-bar> | shell-command-on-region                 |                         |
| <s-left>   | move-beginning-of-line                  |                         |
| <s-right>  | move-end-of-line                        |                         |
| M-s h l    | $$ highlight-lines-matching-regexp      |                         |
| M-s-˙      | M-s-h                                   |                         |
| M-s-h      | ns-do-hide-others                       |                         |
| s-         | shell-command-on-region                 |                         |
| s--        | center-line                             |                         |
| s-,        | customize                               |                         |
| s-:        | ispell                                  |                         |
| s-?        | info                                    |                         |
| s-'        | next-multiframe-window                  |                         |
| s-&        | kill-current-buffer                     |                         |
| s-`        | other-frame                             |                         |
| s-^        | kill-some-buffers                       |                         |
| s-~        | ns-prev-frame                           |                         |
| s-1        | neotree-toggle                          |                         |
| s-a        | mark-whole-buffer                       |                         |
| s-c        | ns-copy-including-secondary             |                         |
| s-C        | ns-popup-color-panel                    |                         |
| s-D        | dired                                   |                         |
| s-d        | isearch-repeat-backward                 | Deleted                 |
| s-e        | ido-switch-buffer                       |                         |
| s-f        | isearch-forward                         | Search-Prefix           |
| s-g        | isearch-repeat-forward                  | isearch-repeat-backward |
| s-h        | ns-do-hide-emacs                        |                         |
| s-H        | ns-do-hide-others                       |                         |
| s-j        | exchange-point-and-mark                 |                         |
| s-J        | join-line                               |                         |
| s-k        | kill-current-buffer                     | unset                   |
| s-l        | goto-line                               |                         |
| s-L        | shell-command                           |                         |
| s-m        | iconify-frame                           |                         |
| s-M        | manual-entry                            |                         |
| s-n        | make-frame                              | Deleted                 |
| s-o        | ns-open-file-using-panel                |                         |
| s-p        | ns-print-buffer                         |                         |
| s-q        | save-buffers-kill-emacs                 |                         |
| s-S        | ns-write-file-using-panel               |                         |
| s-s        | save-buffer                             |                         |
| s-SPC      | set-mark-command                        |                         |
| s-t        | ns-popup-font-panel                     |                         |
| s-U        | xah-toggle-letter-case                  |                         |
| s-v        | yank                                    |                         |
| s-w        | new ido-kill-buffer  (old) delete-frame |                         |
| s-x        | kill-region                             |                         |
| s-y        | ns-paste-secondary                      |                         |
| s-z        | undo                                    |                         |
| s-Z        | undo-tree-redo                          |                         |
** Function Keys Row
*** <f1>
Idea:
- <f1> view *Quick Documentation*
- S-<f1> view *External Documentation*
- s-<f1> view *error description*
- A-<f1> navigate *select in*
*** <f2>
Idea:
- <f2> navigate to *next highlighted error*
- s-<f2> run *stop*

*** <f3>
Idea:
- <f3> navigate *toggle bookmarks*
- s-<f3> navigate *show bookmarks*
  -
*** <f4>
Idea: view *jump to source*
*** <f5>
Idea: refactor *copy*
*** <f6>
*** <f7>
*** <f8>
*** <f9>
*** <f10>
*** <f11>
If you search with none alpha numerics signs like (
#+begin_src emacs-lisp
(general-define-key
 "C-<f11>" '(lambda () (interactive)(setq mac-option-modifier 'none) (message "Modifier Option set to none"))
 "s-<f11>" '(lambda () (interactive)(setq mac-option-modifier 'alt) (message "Modifier Option set to alt"))
 )
#+end_src
*** <f12>
** Number Row
*** 1 °
#+begin_src emacs-lisp
(general-define-key "s-1" '+treemacs/toggle)
#+end_src
*** 2 §
*** 3 ℓ
*** 4 »
*** 5 «
*** 6 $
*** 7 €
*** 8 „
*** 9 “
#+begin_src emacs-lisp
(general-define-key
 "s-9" 'magit-status)
#+end_src
*** 0 ”
*** - —
** Upper Row
*** x X
*** v V :paste:history:clipboard:
Shows a popup menu with a history kills, it's like a clipboard history.
#+begin_src emacs-lisp
(if (require 'browse-kill-ring nil 'noerror)
    (general-define-key "s-V" 'browse-kill-ring)
  (general-define-key "s-V" '(lambda ()
                               (interactive)
                               (popup-menu 'yank-menu))))
#+end_src

*** l L
*** c C
Comment or uncomment a line or region.
#+begin_src emacs-lisp
(global-unset-key (kbd "s-C"))
(general-define-key "s-C" 'comment-line
                    "M-s-c" 'comment-or-uncomment-region)
#+end_src
*** w W :buffer:
#+begin_src emacs-lisp
(global-unset-key (kbd "s-w"))
(general-define-key "s-w" 'kill-current-buffer)

(general-def org-src-mode-map
  "s-w" 'org-edit-src-exit)
#+end_src
*** k K
#+begin_src emacs-lisp
(global-unset-key (kbd "s-k"))
#+end_src
*** h H < :multiple:cursors:
#+begin_src emacs-lisp
(general-define-key
 "A-s-<" 'mc/mark-previous-like-this)
#+end_src
*** g G > :search:multiple:cursors:
#+begin_src emacs-lisp
(general-define-key "s-G" 'isearch-repeat-backward)

(general-define-key
 "A-s->" 'mc/mark-next-like-this)
#+end_src
*** f F :search:org:
Remaping for org-mode. The meta key is maped to fn-key, with cursor it behaves diffrent.
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'org-mode-map
 ;; forword right
 "C-f" 'org-metaright
 )
#+end_src

#+begin_src emacs-lisp
(general-define-key  "s-F r" 'isearch-forward-regexp)
;; (nk/check-package 'swiper (lambda ()(general-define-key
;;                                      "s-F s" 'swiper-isearch
;;                                      "s-F S" 'swiper-isearch-backward
;;                                      "s-F 7" 'swiper-mc) ))

(if (require  'avy
              nil 'noerror)
    (general-define-key
     "s-F a" 'avy-goto-char)

  (if (require  'ace-jump-mode nil 'noerror)
      (general-define-key
       "s-F a" 'ace-jump-char-mode)
    (message "neo-keybinding missing package: avy or ace-jump-mode")))
#+end_src
*** q Q
*** ß ẞ
** Center Row
*** u U
Idea:
- s-U *Main menu | Navigate | Go to Super Method*

upper Lower Case Toggle

#+begin_src emacs-lisp
;; (nk/check-package 'xah-fly-keys
;;                   (lambda () (general-define-key "C-S-u" 'xah-toggle-letter-case)))
(global-unset-key (kbd "s-u"))
(general-define-key
 "s-U" 'xah-toggle-letter-case)
#+end_src

*** i I
*** a A
*** e E
*** o O
#+begin_src emacs-lisp
(global-unset-key (kbd "s-o"))
;;((general-define-key "s-o" 'counsel-find-file)

(general-define-key :prefix "s-O"
                    "p" 'ns-open-file-using-panel
                    "m" 'execute-extended-command)

(map! :after ivy :map ivy-mode-map :prefix "s-O"
      :desc "recent files" "r" #'counsel-recentf
      :desc "open file" "f" #'counsel-find-file)

(general-def org-mode-map
  "s-o" 'counsel-org-goto)

(general-def org-mode-map
  :prefix "s-O"
  "o" 'org-open-at-point
  "s" 'org-edit-special)
#+end_src
*** s S
*** n N :org:
#+begin_src emacs-lisp
(global-unset-key (kbd "s-n"))
#+end_src
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'org-mode-map
 ;; next down
 "C-n" 'org-metadown
 )
#+end_src
*** r R
*** t T
*** d D
#+begin_src emacs-lisp
(global-unset-key (kbd "s-d"))
(general-define-key "s-d" 'duplicate-line-or-region)
#+end_src
*** y Y
** Lower Row
*** ü Ü
*** ö Ö
*** ä Ä :cursor:jump:
Cursor Jumps [[https://github.com/abo-abo/avy][Avy-Mode]] like [[https://github.com/winterTTr/ace-jump-mode][Ace-Jump-Mode]]
#+begin_src emacs-lisp
(general-define-key
 "s-ä" 'avy-goto-char-2
 "s-Ä c" 'avy-goto-char
 "s-Ä l" 'avy-goto-line
 "s-Ä w" 'avy-goto-word-1
 "s-Ä o" 'avy-org-goto-heading-timer
 )
#+end_src
*** p P :org:
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'org-mode-map
 ;; previous up
 "C-p" 'org-metaup
 )
#+end_src
*** z Z :undo:redo:
- =C-z   = undo
- =C-S-z = redo
- =C-x u = Show the undo-tree

  #+begin_src emacs-lisp
(nk/check-package 'undo-tree
                  (lambda () (global-unset-key (kbd "C-/"))
                    (global-unset-key (kbd "C-_"))
                    (general-define-key "C-z" 'undo-tree-undo
                                        "C-Z" 'undo-tree-redo
                                        "s-Z" 'undo-tree-redo)))
  #+end_src

*** b B :org:
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'org-mode-map
 ;; backward left
 "C-b" 'org-metaleft
 )
#+end_src
*** m M
The keybinding =C-m= effects a =return=, and I think that's a bug.
#+begin_src emacs-lisp
(define-key input-decode-map [?\C-m] [C-m])
;;(general-define-key "<C-m>" '(lambda () (interactive) (message "C-m is not the same as RET any more!")))
#+end_src
*** , –
*** . •
*** j J :join:line:
*C-S-j*
Join this line to previous and fix up whitespace at join.
#+begin_src emacs-lisp
(general-define-key "C-S-j" 'join-line
                    "s-J" 'join-line)
#+end_src

** Space Return Backspace Delete Up Down Right Left Tab
*** return
#+begin_src emacs-lisp
(general-define-key
 ;; NOTE: keymaps specified with :keymaps must be quoted
 :keymaps 'org-mode-map
 "s-<return>" 'org-meta-return
 )
#+end_src
*** Cursor up down :text:move:select:
#+begin_src emacs-lisp
(nk/check-package 'move-text (lambda () (general-define-key
                                         "s-S-<up>"  'move-text-up
                                         "s-S-<down>"  'move-text-down)))
#+end_src


Erweitere und schrumpfe den selektierten Text.

#+begin_src emacs-lisp
(nk/check-package 'expand-region
                  (lambda () (general-define-key
                              "A-<up>"  'er/expand-region
                              "A-<down>" 'er/contract-region))
                  )
#+end_src

*** Cursor links und rechts :cursor:move:

#+begin_src emacs-lisp
(general-define-key "s-<right>" 'move-end-of-line
                    "s-<left>" 'move-beginning-of-line)
#+end_src

*** Leertaste Space Key :multiple:cursors:

#+begin_src emacs-lisp
(global-unset-key (kbd "A-<tab>"))
(global-unset-key (kbd "C-@"))
(global-unset-key (kbd "M-SPC"))
(global-unset-key (kbd "M-@"))

(general-define-key  "M-SPC" 'set-mark-command)
(general-define-key  "s-SPC" 'set-mark-command)
#+end_src

Select Text and Fast

- =C-c m c = Add one cursor to each line of the active region.
- =C-c m a = Find and mark all the parts of the buffer matching the currently active region

  #+begin_src emacs-lisp
(general-define-key
 "S-s-SPC c" 'mc/edit-lines
 "S-s-SPC a" 'mc/mark-all-like-this
 "S-s-SPC p" 'mark-paragraph
 )
  #+end_src


*** Tab
Manchmal kommen snippets in den Weg und ich möchte nur einrücken.
#+begin_src emacs-lisp
(general-define-key
 "C-<tab>" 'indent-for-tab-command)
#+end_src
