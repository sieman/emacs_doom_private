#+TITLE: SiM's Doom Emacs Config
#+AUTHOR: Siegmar Mantei
#+DESCRIPTION: SiM's personal Doom Emacs config.
#+STARTUP: showeverything

* ABOUT THIS CONFIG
This is my personal Doom Emacs config. Doom Emacs is a distribution of Emacs that offers the "evil" keybindings (Vim keybindings) and the standard keybindings. And Doom includes a number of nice extensions and a bit of configuration out of the box. The Vim keybindings are made for US keyboard layout. I use a german layout [[https://neo-layout.org/][Neo2]]. Therefore I use the standard keybindings plus xah fly keys and customized it for Neo2.

(The [[https://gitlab.com/dwt1/dotfiles/-/tree/master/.config/doom][config]] from Distro Tube, D. Taylor inspired me. So I refactored my config.)

* Shell User
From doom documentation .emacs.d/lisp/cli/doctor.el:

Fish (and possibly other non-POSIX shells) is known to inject garbage
output into some of the child processes that Emacs spawns. Many Emacs
packages/utilities will choke on this output, causing unpredictable issues.

To get around this, either:
- Add the following to $DOOMDIR/config.el:
  =(setq shell-file-name (executable-find "bash"))=
- Or change your default shell to a POSIX shell (like bash or zsh)
  and explicitly configure your terminal apps to use the shell you
  want.

If you opt for option 1 and use one of Emacs' terminal emulators, you
will also need to configure them to use Fish, e.g.
=(setq-default vterm-shell (executable-find "fish"))=
=(setq-default explicit-shell-file-name (executable-find "fish"))=
#+begin_src emacs-lisp
(setq shell-file-name (executable-find "bash" ))
(setq-default vterm-shell (executable-find "zsh" ))
(setq-default explicit-shell-file-name (executable-find "zsh" ))
#+end_src

* Four modifier
Using four modifier in emacs is possible if you are using right and left super  or control key to provide meta, control, hyper and super modifier keys. You can use [[https://karabiner-elements.pqrs.org/][Karabiner-Elements]] a stable keyboard customizer for macOS.

And it is also a basic modifier setup, that works well for me.

[[https://github.com/sieman/four-modifier][Github Sieman Four Modifier]]
#+begin_src emacs-lisp :tangle "packages.el"
(package! four-modifier :recipe (:host github :repo "sieman/four-modifier"))
#+end_src

#+begin_src emacs-lisp
(require 'four-modifier)
#+end_src

* Xah Fly Keys
I like to use a modal editing mode like vim but the fly keys keybinding system is more ergonmic and can be used on diffrent keyboard layouts.

https://github.com/xahlee/xah-fly-keys
http://xahlee.info/emacs/misc/xah-fly-keys.html

#+begin_src emacs-lisp :tangle "packages.el"
(package! xah-fly-keys :recipe (:host github :repo "xahlee/xah-fly-keys"))
(package! neo-layout-fly-keys :recipe (:host github :repo "sieman/neo-layout-fly-keys"))
#+end_src


[[https://github.com/sieman/neo-layout-fly-keys][Neo Layout Fly Keys]]
The advantage of Fly Keys that this package works with diffrent keybord layouts. And this is the adaption for Neo2 layout.

#+begin_src emacs-lisp
(after! xah-fly-keys
  (defun sim/flykeys-indicate-command-mode () (interactive)
         (custom-set-faces
          `(cursor ((t (:background "SeaGreen4"))))
          ;; `(cursor ((t (:background "#1ea4ff"))))
          ;; `(dirvish-hl-line ((t (:box (:line-width 2 :color "white")))))
          )
         (custom-set-variables '(cursor-type 'box))
         (blink-cursor-mode 1)
         (xah-fly-save-buffer-if-file)
         )

  (defun sim/flykeys-indicate-insert-mode () (interactive)
         (custom-set-faces
          `(cursor ((t (:background "red"))))
          )
         (custom-set-variables '(cursor-type 'hollow))
         (blink-cursor-mode 0)
         (better-jumper-set-jump))

  (add-hook! 'color-rg-mode-hook 'xah-fly-insert-mode-activate)
  (add-hook! 'dired-hook 'xah-fly-insert-mode-activate)
  (add-hook! 'dirvish-setup-hook 'xah-fly-insert-mode-activate)
  (add-hook! 'magit-mode-hook 'xah-fly-insert-mode-activate)
  (add-hook! 'magit-popup-mode-hook 'xah-fly-insert-mode-activate)
  (add-hook! 'pdf-view-mode 'xah-fly-insert-mode-activate)
  (add-hook! 'vterm-copy-mode-hook 'xah-fly-insert-mode-activate)
  (add-hook! 'vterm-mode-hook 'xah-fly-insert-mode-activate)
  (add-hook! 'xah-fly-insert-mode-activate-hook  'sim/flykeys-indicate-insert-mode)
  (add-hook! 'xah-fly-command-mode-activate-hook 'sim/flykeys-indicate-command-mode)
  (add-hook! 'pdf-view-mode-hook 'sim/flykeys-indicate-command-mode)
  ;; (global-set-key (kbd "H-<left>") 'xah-fly-command-mode-activate)
  ;; (global-set-key (kbd "ESC ESC") 'xah-fly-command-mode-activate)
  )

(defun sim/fly-to-avy-tmenu ()
  (interactive)
  (xah-fly-insert-mode-activate)
  (casual-avy-tmenu))

(defun sim/flykeys-on ()
  (interactive)
  (neo2/flykeys-on)
  (define-key xah-fly-command-map (kbd "1") nil)
  (define-key xah-fly-command-map (kbd "1") 'delete-other-windows)

  (define-key xah-fly-command-map (kbd "2") nil)
  (define-key xah-fly-command-map (kbd "2") 'sim/split-window-below-and-move-there-dammit)
  (define-key xah-fly-command-map (kbd "3") nil)
  (define-key xah-fly-command-map (kbd "3") 'sim/split-window-right-and-move-there-dammit)
  (define-key xah-fly-command-map (kbd "4") nil)
  (define-key xah-fly-command-map (kbd "4") 'delete-window)

  (define-key xah-fly-command-map (kbd "5") nil)
  (define-key xah-fly-command-map (kbd "5") (kbd! "C-c l"))
  ;;(define-key xah-fly-command-map (kbd "TAB") xah-fly--tab-key-map)

  (define-key xah-fly-command-map (kbd "8") nil)
  (define-key xah-fly-command-map (kbd "8") 'xah-select-text-in-quote)
  (define-key xah-fly-command-map (kbd "9") nil)
  (define-key xah-fly-command-map (kbd "9") 'xah-extend-selection)
  (define-key xah-fly-command-map (kbd "q") nil)
  (define-key xah-fly-command-map (kbd "q") (kbd! "<f7>"))

  (define-key xah-fly-command-map (kbd "U") 'eval-expression)

  (define-key xah-fly-command-map (kbd "o") nil)
  (define-key xah-fly-command-map (kbd "o") (kbd! "C-c"))

  (define-key xah-fly-command-map (kbd "O") nil)
  (define-key xah-fly-command-map (kbd "O") (kbd! "C-x"))

  (define-key xah-fly-command-map (kbd "S") 'sim/fly-to-avy-tmenu)

  (define-key xah-fly-command-map (kbd "B") '(lambda () (interactive) (xah-fly-insert-mode-activate) (casual-isearch-tmenu)))

  (define-key xah-fly-command-map (kbd "-") 'org-next-visible-heading)
  (define-key xah-fly-command-map (kbd "(") 'org-previous-visible-heading)

  (define-key xah-fly-command-map (kbd "d") nil)
  (define-key xah-fly-command-map (kbd "d") 'xah-goto-matching-bracket)

  (define-key xah-fly-command-map (kbd ",") nil)
  (define-key xah-fly-command-map (kbd ",") 'open-line)

  ;; (define-key xah-fly-command-map (kbd ".") nil)
  ;; (define-key xah-fly-command-map (kbd ".") xah-fly-leader-key-map)

  (define-key xah-fly-command-map (kbd "j") nil)
  (define-key xah-fly-command-map (kbd "j") 'xah-next-window-or-frame)

  (define-key xah-fly-command-map (kbd "SPC") nil)
  (define-key xah-fly-command-map (kbd "SPC") 'xah-insert-space-before)

                                        ; Wrong type argument: commandp, (neo2/insert-mode-f 'casual-avy-tmenu)
  (defun neo2/insert-mode-f (func)
    "Go to insert mode and execute giffen func function."
    (interactive)
    (xah-fly-insert-mode-activate)
    (funcall func))
  )
#+End_src


* Dired
** dired - file manager
#+begin_src emacs-lisp
(after! dired
  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode 1)
              (map!
               :mode 'dired-mode
               :desc "Hides dotfiles DIRED" "C-c t ." #'dired-hide-dotfiles-mode))
            )
  (put 'dired-find-alternate-file 'disabled nil)
  )
#+end_src

** Hide Dot file
Most of the time I'm not interested to see all dotfiles. This package hides the dotfiles.
https://github.com/mattiasb/dired-hide-dotfiles
#+begin_src emacs-lisp :tangle "packages.el"
(package! dired-hide-dotfiles :recipe (:host github :repo "mattiasb/dired-hide-dotfiles"))
#+end_src
** DirVish
https://github.com/alexluigit/dirvish?tab=readme-ov-file
https://github.com/alexluigit/dirvish/blob/main/docs/EMACS-NEWCOMERS.org

#+begin_src emacs-lisp
(after! dirvish
  (setq! dirvish-quick-access-entries
         `(
           ("c" "~/Documents/Code/" "Code")
           ("d" "~/Desktop/" "Desktop")
           ("e" ,user-emacs-directory "Emacs user directory")
           ("k" "~/Documents/EinnahmenAusgaben/Kontoauszuege" "Kontoauszuege")
           ("l" "~/Downloads/" "Downloads")
           ("o" "~/Documents/" "Documents")
           ("p" "~/Pictures/"  "Pictures")
           ("r" "~/Documents/orgs/" "Org Files")
           ("s" "~/Documents/EinnahmenAusgaben/Steuer" "Steuer")
           ("h" "~/" "Home")
           ;; ("" "~/" "")
           )
         )
  (map! :map dired-mode-map
        "ß" #'dired-omit-mode
        "ü" #'dirvish-mode-map
        "ä" #'dirvish-quick-access)
  ;; (setq! dirvish-hide-details t)
  (setq! dirvish-preview-dired-sync-omit t)
  )
#+end_src


* Elisp Bug Hunter :language:
I think that is useful to find bugs in elisp. I have to expore that package!

https://github.com/Malabarba/elisp-bug-hunter
#+begin_src emacs-lisp :tangle "packages.el"
(package! elisp-bug-hunter :recipe (:host github :repo "Malabarba/elisp-bug-hunter"))
#+end_src

* Theme :appearance:
[[https://github.com/doomemacs/themes][Doom Emacs' Theme Pack]]
Solarized improved version is oksolar :-)
#+begin_src emacs-lisp
;; load this theme at startup
;; (setq doom-theme 'doom-one)
;; (setq doom-theme 'doom-oksolar-dark)
(setq doom-theme 'doom-oksolar-light)
;; All themes are safe to load
(setq custom-safe-themes t)
#+end_src

* TODO I like to check the [[https://github.com/ronisbr/doom-nano-modeline][nano]] port for doom.

* Appearance Cursor Parentheses Region :appearance:
#+begin_src emacs-lisp
(custom-set-faces
 '(show-paren-match ((t (:background "black" :foreground "yellow" :inverse-video t :weight bold))))
 '(region ((t (:foreground "#f1c40f" :background "#2c3e50" :inverse-video t))))
 `(cursor ((t (:foreground "white" :background "red")))))

(custom-set-variables '(cursor-type 'box))
#+end_src
* Dashboard and Splash Image :appearance:
#+begin_src emacs-lisp
;; Splash image
(setq fancy-splash-image (concat doom-private-dir "thenwhyworry.png")
      +doom-dashboard-banner-padding '(0 . 1))
;; Hide the menu for as minimalistic a startup screen as possible.
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
#+end_src
* Projectile

Your $HOME is recognized as a project root! Emacs will assume $HOME is the root of any project living under $HOME. If this
isn't desired, you will need to remove ".git" from `projectile-project-root-files-bottom-up' (a variable)

#+begin_src emacs-lisp
(after! projectile
  (setq projectile-project-root-files-bottom-up (remove ".git" projectile-project-root-files-bottom-up)))
#+end_src

* Fly Check
#+begin_src emacs-lisp
(add-hook! 'doom-load-theme-hook
           ;; A more visible window border
           ;; (set-face-attribute 'vertical-border nil :foreground (doom-color 'highlight))
           ;; Flycheck errors use the color of functions
           (after! flycheck
             (set-face-attribute 'flycheck-error nil
                                 :underline `(:color ,(doom-color 'functions)
                                              :style wave))))
#+end_src

* Clock and Line Number
#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
(setq display-time-24hr-format t)
#+end_src

* Which Key Mode
#+begin_src emacs-lisp
(after! which-key
  (setq which-key-side-window-max-width 0.44
        which-key-max-display-columns 2
        which-key-side-window-max-height 0.26
        which-key-max-description-length 90)
  (which-key-setup-side-window-right-bottom))
#+end_src
* Modeline and Taps

I like the clearness of that [[https://github.com/rougier/nano-emacs][Rougier Nano-Emacs]] and the [[https://github.com/ronisbr/doom-nano-themes][Ronisbr Doom - Nano - Theme]] version. But at the moment Ronisbr implementation support only evil user.

My workaround is to use [[https://github.com/ema2159/centaur-tabs][Taps]] and hide the modeline. Hear comes some keybindings that helps


#+begin_src emacs-lisp
(map!
 :desc "Modeline toggle view" "C-c t m" #'global-hide-mode-line-mode
 :desc "Print working Directory pwd" "C-c f i" #'pwd
 )
#+end_src

* Fonts

Fraktur Schriftart
http://www.ligafaktur.de/LOV.Novellenschrift.ttf


Iosevka
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "Iosevka SS04" :style "Thin" :size 13)
      doom-variable-pitch-font (font-spec :family "LOV.Novellenschrift" :size 20))
#+end_src

Which fonts can emacs display on your machine? -> =(print (font-family-list))=

#+begin_src sh :tangle no
brew tap homebrew/cask-fonts && brew install --cask font-jetbrains-mono-nerd-font
brew tap homebrew/cask-fonts && brew install --cask font-open-dyslexic-nerd-font
#+end_src

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 12 :weight 'medium)
      doom-variable-pitch-font (font-spec :family "OpenDyslexic" :size 13)
      )

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

* Calendar
#+begin_src emacs-lisp
(load! "sim-calendar")
(require 'sim-calendar)
(set-language-environment "German")
(set-locale-environment "de_DE.UTF-8")
#+end_src
* Rechtschreibprüfung :spell:checking:

npm install dictionary-en-gb

#+begin_src emacs-lisp
(setq ispell-dictionary "de_DE")
(setq ispell-hunspell-dict-paths-alist
      '(
        ("de_DE" "~/.e/sieman.doom.d/spelling/de_DE.aff")
        ("en_GB" "~/.e/sieman.doom.d/spelling/en_GB.aff")
        ))
(after! flyspell-mode
  (flyspell-mode 0))
;; (setq company-global-modes '(not text-mode org-mode))
#+end_src
* ELLAMA
[[https://github.com/s-kostyaev/ellama][Ellama]] is a tool for interacting with large language models from Emacs.  You need to have ‘ollama’ installed on your computer to use ‘ellama’ in Emacs.  You need to pull in any LLMs that you want to have available for use.  For example, if you want to be able to use Llama 3.1, then you need to run ‘ollama pull llama3.1’.


https://gitlab.com/dwt1/dotfiles/-/blob/master/.config/emacs/config.org?ref_type=heads#ellama

#+begin_src emacs-lisp :tangle "packages.el"
(package! ollama :recipe (:host github :repo "niklasbuehler/ollama.el"))
#+end_src


* TODO AI Auto Compleation
[[https://github.com/TommyX12/company-tabnine][Emacs Plugin]] https://github.com/shuxiao9058/tabnine/
TabNine is the all-language autocompleter. It uses machine learning to provide responsive, reliable, and relevant suggestions.

* Multiple Cursors
#+begin_src emacs-lisp
(after! mc-mark-more
  (setq! mc/list-file "~/.e/sieman.doom.d/mc-lists.el")
  (setq! mc/match-cursor-style t)
  (define-key mc/keymap (kbd "<return>") nil)
  (message "mc-mark-more loaded")
  )
#+end_src
* TODO Navigate Back and Forward, the Better Jump
Ich mag in einem Buffer herumspringen.
#+begin_src emacs-lisp
(after! better-jumper
  (setq! better-jumper-context 'buffer)
  (setq! better-jumper-use-savehist t)
  (setq! better-jumper-use-evil-jump-advice nil))
#+end_src

* Casual dired avy info calc isearch

https://github.com/kickingvegas/casual-suite

#+begin_src emacs-lisp :tangle "packages.el"
(package! casual-suite  :recipe (:host github :repo "kickingvegas/casual-suite"))
#+end_src

#+begin_src emacs-lisp
(after! casual-suite
  ;; (require 'casual-suite)
  (use-package! casual
    :ensure t
    :bind (:map calc-mode-map ("C-o" . 'casual-calc-tmenu)))

  (use-package! casual-info
    :ensure t
    :bind (:map Info-mode-map ("C-o" . 'casual-info-tmenu)))

  (use-package! casual-dired
    :ensure t
    :bind (:map dired-mode-map ("C-o" . 'casual-dired-tmenu)))

  (use-package! casual-avy
    :ensure t
    :bind ("M-g" . casual-avy-tmenu))

  (use-package! cc-isearch-menu
    :ensure t
    :bind (:map isearch-mode-map ("<f2>" . 'cc-isearch-menu-transient)))
  )
#+end_src

* Show Keys
Dies ist ein Minor-Mode und zeigt die gedrückten Tasten an.
#+begin_src emacs-lisp
(load! "+show-keys.el")
#+end_src

* Reading Books
A eBook viewer for emas.

[[https://depp.brause.cc/nov.el/][Nov]] Major mode for reading EPUBs in Emacs
#+begin_src emacs-lisp :tangle "packages.el"
(package! nov)
#+end_src

#+begin_src emacs-lisp
(use-package! nov
  :config (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src

* Org mode
https://orgmode.org/


#+begin_src emacs-lisp
;;; :lang org
(setq org-directory "~///Documents/org-roam"
      org-roam-directory org-directory
      org-roam-db-location (file-name-concat org-directory ".org-roam.db")
      org-roam-dailies-directory "journal/"
      org-archive-location (file-name-concat org-directory ".archive/%s::")
      org-agenda-files (list org-directory)
      org-startup-with-inline-images t
      )

(after! org

  (add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sea" . "src emacs-lisp :tangle autoload.el"))
  (add-to-list 'org-structure-template-alist '("sc" . "src clojure"))
  (add-to-list 'org-structure-template-alist '("ss" . "src shell"))
  (add-to-list 'org-structure-template-alist '("sb" . "src fish :dir ~/ :results output"))
  (add-to-list 'org-structure-template-alist '("sf" . "src fish :mkdirp yes :tangle ~/.terminal-settings/config.fish"))
  (add-to-list 'org-structure-template-alist '("sz" . "src zsh :mkdirp yes :tangle ~/.zshrc"))

  ;; active Babel languages
  ;; (org-babel-do-load-languages 'org-babel-load-languages '((shell . t))) ; use babel packages instead

  (setq org-babel-clojure-backend 'cider
        org-hide-emphasis-markers t)
  )
(add-hook! 'org-log-buffer-setup-hook '(require 'org-keys))

(after! ox-latex
  (load! "ox-koma-letter")
  (add-to-list 'org-latex-classes
               '("brief"
                 "\\documentclass{scrlttr2}
\[NO-DEFAULT-PACKAGES]
\[NO-PACKAGES]
\[NO-EXTRA]
\\KOMAoption{fontsize}{12pt}
\\KOMAoption{parskip}{half}
\\KOMAoption{paper}{A4}
\\KOMAoption{fromalign}{right}
\\usepackage[utf8]{inputenc}
\\usepackage{eurosym}
\\usepackage[ngerman]{babel}
\\usepackage{pdfpages}
\\usepackage[hidelinks]{hyperref}
\\setkomavar*{enclseparator}{Anlagen}
\\DeclareUnicodeCharacter{202D}{}
\\DeclareUnicodeCharacter{202C}{}
"))
  (setq org-koma-letter-default-class "brief")
  (setq org-export-default-language "de")
  )
#+end_src

** Org mode exporters OX
This litle packages provide a export to jira and confluence  markup.
#+begin_src emacs-lisp :tangle "packages.el"
(package! ox-confluence-en :recipe (:host github :repo "correl/ox-confluence-en"))
(package! ox-jira :recipe (:host github :repo "stig/ox-jira.el"))
#+end_src

#+begin_src emacs-lisp
(use-package! ox-jira)
#+end_src

This package provide an export to e - book format epub. I like it to make readable texts for mobile phones :-)
#+begin_src emacs-lisp :tangle packages.el
(package! ox-epub)
#+end_src
** *Org Face* :org:appearance:
#+begin_src emacs-lisp
(add-hook! org-mode
           ;; Document title font
           (set-face-attribute 'org-document-title nil :height 2.0)
           (set-face-attribute 'org-level-1 nil :height 1.8)
           (set-face-attribute 'org-level-2 nil :height 1.6)
           (set-face-attribute 'org-level-3 nil :height 1.4)
           (set-face-attribute 'org-level-4 nil :height 1.2)
           (set-face-attribute 'org-level-5 nil :height 1.1)
           (set-face-attribute 'org-level-6 nil :height 1.1)
           (set-face-attribute 'org-level-7 nil :height 1.1)
           (set-face-attribute 'org-level-8 nil :height 1.1)
           (set-face-attribute 'org-block nil :height 1.1)

           )
#+end_src

** Modern Org Style
#+begin_src emacs-lisp :tangle "packages.el"
(package! org-modern)
#+end_src

#+begin_src emacs-lisp
(use-package! org-modern
  :config
  ;; Minimal UI

  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis "…"

   ;; Agenda styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "◀── now ─────────────────────────────────────────────────")
  )

(map!
 :desc "Modern Look Org Mode" "C-c t o" #'org-modern-mode
 )
#+end_src
** Deft for org-mode :org:
Deft is not installed!
#+begin_src emacs-lisp
(setq deft-extensions '("txt" "tex" "org"))
(setq deft-directory "~/Documents/orgs")
(setq deft-recursive t)
(global-set-key [f8] 'deft)
#+end_src

** TODO AI Assistance
[[https://github.com/rksm/org-ai?tab=readme-ov-file#installation][Org AI]]
#+begin_src emacs-lisp :tangle "packages.el"
;; https://github.com/rksm/org-ai
(package! org-ai :recipe (:host github :repo "rksm/org-ai"))
#+end_src


* Cider
*Evaluation:*
_in buffer:_
| =C-x C-e=           | cider-eval-last-sexp |
| =C-c C-e=           |                      |
| =<localleader> e e= |                      |
Evaluate the form preceding point and display the result in the echo area and/or
in an buffer overlay (according to cider-use-overlays). If invoked with a prefix
argument, insert the result into the current buffer.

| =<localleader> p D= | =cider-pprint-eval-defun-to-comment= |
Produces an output like this: =;;-> {"dark olive" 1, "vibrant plum" 2}=

_to REPL:_
| =C-c M-e=           | cider-eval-last-sexp-to-repl        |
| =<localleader> p r= | =cider-pprint-eval-last-sexp-to-repl= |
Evaluate the form preceding point and output it result to the REPL buffer. If
invoked with a prefix argument, takes you to the REPL buffer after being
invoked.

_from Source to REPL:_
| =C-return= | eir-eval-in-cider |
Copy the expression from buffer and paste it in REPL then evaluates it.

Navigation
Refactoring
Editing

Ich möchte gerne eine Historie für die REPL haben.

#+begin_src emacs-lisp
(set-popup-rule! "^\\*cider-clojuredocs\\*" :side 'right :size 0.5)
#+end_src

#+begin_src emacs-lisp
(after! clojure-mode
  (add-hook 'clojure-mode-hook #'aggressive-indent-mode)
  (message "My Clojure config")

  (defun clerk-show ()
    (interactive)
    (save-buffer)
    (let
        ((filename
          (buffer-file-name)))
      (when filename
        (cider-interactive-eval
         (concat "(nextjournal.clerk/show! \"" filename "\")")))))

  (define-key clojure-mode-map (kbd "<M-return>") 'clerk-show)

  )
#+end_src

* Eval in repl
You can use C-RET in a source file to start up an appropriate REPL (except cider, which needs manual M-x cider-jack-in) and evaluate a line, selected region or the current expression depending on the context.

https://github.com/kaz-yos/eval-in-repl

#+begin_src emacs-lisp :tangle "packages.el"
(package! eval-in-repl)
#+end_src

#+begin_src emacs-lisp
(after! cider
  (require 'eval-in-repl-cider)
  (define-key clojure-mode-map (kbd "<C-return>") 'eir-eval-in-cider))
#+end_src

* EDIFF
empty

* Latex
Change some font weights for the sections in LaTeX

#+begin_src emacs-lisp
(add-hook! LaTeX-mode
  (set-face-attribute 'font-latex-sectioning-1-face nil :height 1.8 :weight 'bold)
  (set-face-attribute 'font-latex-sectioning-2-face nil :height 1.6)
  (set-face-attribute 'font-latex-sectioning-3-face nil :height 1.3)
  (set-face-attribute 'font-latex-sectioning-4-face nil :height 1.1)
  (set-face-attribute 'font-latex-sectioning-5-face nil :height 1.1))
#+end_src

Match the background of latex previews and scale a bit less than the default

#+begin_src emacs-lisp
(after! preview
  (setq preview-scale 1.2)
  (set-face-attribute 'preview-reference-face nil :background (doom-color 'bg)))
#+end_src

* HOLD Dict.cc translate
[[https://github.com/martenlienen/dictcc.el][Dictcc]] is a emacs interface for the online dictionary [[https://www.dict.cc/][dict.cc]]. At the moment it use ivy ore helm as completion but not vertico. I use it when vertico is supported.
#+begin_src emacs-lisp :tangle no
(package! dictcc)
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! dictcc
  :diminish
  :config
  (setq dictcc-source-lang "en"
        dictcc-destination-lang "de"
        dictcc-completion-backend 'vertico)
  )
#+end_src

* SiM functions that tangled into autoload.el :autoload:el:
Adds the the header of autoload.el
#+begin_src emacs-lisp :tangle autoload.el
;;; autoload.el -*- lexical-binding: t; -*-
#+end_src

** Duplicate Line Or Region :autoload:el:
This feature duplicate a line ore a region I realy like in Intellij Idea. So why not have in Emacs?
I found a solution on https://www.emacswiki.org/emacs/CopyingWholeLines that works for best.

#+begin_src emacs-lisp :tangle autoload.el
;;;###autoload
(defun sim/duplicate-line-or-region (&optional n)
  "Duplicate current line, or region if active.
      With argument N, make N copies.
      With negative N, comment out original line and use the absolute value."
  (interactive "*p")
  (let ((use-region (use-region-p)))
    (save-excursion
      (let ((text (if use-region        ;Get region if active, otherwise line
                      (buffer-substring (region-beginning) (region-end))
                    (prog1 (thing-at-point 'line)
                      (end-of-line)
                      (if (< 0 (forward-line 1)) ;Go to beginning of next line, or make a new one
                          (newline))))))
        (dotimes (i (abs (or n 1)))     ;Insert N times, or once if not specified
          (insert text))))
    (if use-region nil                  ;Only if we're working with a line (not a region)
      (let ((pos (- (point) (line-beginning-position)))) ;Save column
        (if (> 0 n)                             ;Comment out original with negative arg
            (comment-region (line-beginning-position) (line-end-position)))
        (forward-line 1)
        (forward-char pos)))))

#+end_src

** Goto Line and show line numbers :autoload:el:
- =M-g M-g   = goto line number and shows line numbers

#+begin_src emacs-lisp :tangle autoload.el
;;;###autoload
(defun sim/goto-line-with-feedback ()
  "Show line numbers temporarily, while prompting for the line number input"
  (interactive)
  (unwind-protect
      (progn
        (linum-mode 1)
        (call-interactively 'goto-line))
    (linum-mode -1)))
#+end_src

  
| COMMAND   | DESCRIPTION                                             | KEYBINDING |
|-----------+---------------------------------------------------------+------------|
| goto-line | displays line numbers and ask where the cursor can jump | s - l      |

#+begin_src emacs-lisp
(global-set-key [remap goto-line] 'goto-line-with-feedback)
(map!  "s-l" (if (featurep 'vertico) #'consult-goto-line #'goto-line))
#+end_src

** Transparency :autoload:el:
https://www.emacswiki.org/emacs/TransparentEmacs
#+begin_src emacs-lisp :tangle autoload.el
;;;###autoload
(defun sim/toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(94 . 50) '(100 . 100)))))
#+end_src

#+begin_src emacs-lisp
(global-set-key (kbd "C-c t t") 'sim/toggle-transparency)
#+end_src

** Maximize buffer temporarily
If I have some split buffers open and I want maximize one and then return to the split buffers. How that works, I found a solution on this gist https://gist.github.com/3402786

#+begin_src emacs-lisp :tangle autoload.el
;;;###autoload
(defun sim/toggle-maximize-buffer ()
  "Maximize buffer"
  (interactive)
  (save-excursion
    (if (and (= 1 (length (window-list)))
             (assoc ?_ register-alist))
        (jump-to-register ?_)
      (progn
        (window-configuration-to-register ?_)
        (delete-other-windows)))))
#+end_src

#+begin_src emacs-lisp
(map!  "<f11>" #'sim/toggle-maximize-buffer)
#+end_src

** Split buffer in half

#+begin_src emacs-lisp :tangle autoload.el
;;;###autoload
(defun sim/split-window-right-and-move-there-dammit ()
  (interactive)
  (split-window-right)
  (windmove-right))

;;;###autoload
(defun sim/split-window-below-and-move-there-dammit ()
  (interactive)
  (split-window-below)
  (windmove-down))
#+end_src

#+begin_src emacs-lisp
(global-set-key (kbd "C-x 3") 'sim/split-window-right-and-move-there-dammit)
(global-set-key (kbd "C-x 2") 'sim/split-window-below-and-move-there-dammit)
#+end_src
* Super Keybindings
My preferred way of using super key.

** Mapping for Sign Row

… _ [ ] ^ < > = &
\ / { } * ? ( ) - : @
# $ | ~ ` + % " ' ;

| Letter | COMMAND                    | DESCRIPTION | KEYBINDING | SECTION |
|--------+----------------------------+-------------+------------+---------|
| -      | [[elisp:(helpful-command 'doom/decrease-font-size)][doom/decrease-font-size]]    |             | s--        | [[tick]]    |
| +      | [[elisp:(helpful-command 'doom/reset-font-size)][doom/reset-font-size]]       |             | s-+        | [[tick]]    |
| =      | [[elisp:(helpful-command 'doom/increase-font-size)][doom/increase-font-size]]    |             | s-=        | [[tick]]    |
| ^      | kill-some-buffers          |             | s-^        |         |
| <      | mc/mark-previous-like-this |             |            |         |
| >      | mc/mark-next-like-this     |             |            |         |
| ?      |                            |             |            |         |
| :      | ispell                     |             |            |         |


** Mapping for Number Row

1234567890

| Letter | COMMAND                                     | DESCRIPTION                    | KEYBINDING    | SECTION |
|--------+---------------------------------------------+--------------------------------+---------------+---------|
|      1 | [[elisp:(helpful-command '+treemacs/toggle)][+treemacs/toggle]]                            | shows current folder of buffer | s-1           | [[s-0-9]]   |
|      2 |                                             |                                |               | [[s-0-9]]   |
|      3 |                                             |                                |               | [[s-0-9]]   |
|      4 |                                             |                                |               | [[s-0-9]]   |
|      5 |                                             |                                |               | [[s-0-9]]   |
|      6 |                                             |                                |               | [[s-0-9]]   |
|      7 |                                             |                                |               | [[s-0-9]]   |
|      8 |                                             |                                |               | [[s-0-9]]   |
|      9 | [[elisp:(helpful-command 'magit-status)][magit-status]]                                | opens git UI magit             | s-9           | [[s-0-9]]   |
|      0 | [[elisp:(helpful-command 'text-scale-adjust)][text-scale-adjust]]                           | zoom in out Text               | s-0           | [[s-0-9]]   |
|      ` | [[elisp:(helpful-command 'org-self-insert-command)][org-self-insert-command]] self-insert-command | ???                            |               |         |
|    Del | [[elisp:(helpful-command 'doom/backward-kill-to-bol-and-indent)][doom/backward-kill-to-bol-and-indent]]        |                                | s-<backspace> |         |

** Mapping for x to ß Row

xvlcw khgfq ß

| Letter | COMMAND                       | DESCRIPTION               | KEYBINDING | SECTION    |
|--------+-------------------------------+---------------------------+------------+------------|
| x      | [[elisp:(helpful-command 'kill-region)][kill-region]]                   | cut                       | s-x        | [[edit]]       |
| v      | [[elisp:(helpful-command 'yank)][yank]]                          | paste                     | s-v        | [[edit]]       |
| V      | [[elisp:(helpful-command 'yank-pop)][yank-pop]]                      | paste history             | s-V        | [[edit]]       |
| l      | [[elisp:(helpful-command 'sim/goto-line-with-feedback)][sim/goto-line-with-feedback]]   |                           | s-l        | [[navigation]] |
| L      | [[elisp:(helpful-command 'shell-command)][shell-command]]                 |                           | s-L        |            |
| c      | [[elisp:(helpful-command 'copy-region-as-kill)][copy-region-as-kill]]           | copy                      | s-c        | [[edit]]       |
| C      | [[elisp:(helpful-command 'comment-line)][comment-line]]                  | // a comment              | s-C        | [[code]]       |
| w      | [[elisp:(helpful-command 'kill-current-buffer)][kill-current-buffer]]           | close buffer              | s-w        | [[buffers]]    |
| W      | [[elisp:(helpful-command 'doom/delete-frame-with-prompt)][doom/delete-frame-with-prompt]] | close frame               | s-W        | [[buffers]]    |
| k      | [[elisp:(helpful-command 'er/expand-region)][er/expand-region]]              |                           | s-k        | [[edit]]       |
| K      | [[elisp:(helpful-command 'er/contract-region)][er/contract-region]]            |                           | s-K        | [[edit]]       |
| h      | [[elisp:(helpful-command 'set-mark-command)][set-mark-command]]              |                           | s-h        | [[edit]]       |
| g      | [[elisp:(helpful-command 'isearch-repeat-forward)][isearch-repeat-forward]]        | Search                    | s-g        |            |
| G      | [[elisp:(helpful-command 'isearch-repeat-backward)][isearch-repeat-backward]]       | Search                    | s-G        |            |
| f      | [[elisp:(helpful-command 'consult-line)][consult-line]]                  | Search the current Buffer | s-f        |            |
| F      | [[elisp:(helpful-command 'isearch-backward)][isearch-backward]]              |                           | s-F        |            |
| q      | [[elisp:(helpful-command 'save-buffers-kill-terminal)][save-buffers-kill-terminal]]    | Quite Emacs               | s-q        |            |
| ß      | [[elisp:(helpful-command 'completion-help-at-point)][completion-help-at-point]]      | completion help           | s-ß       | [[code]]       |


** Mapping for u to y Row

uiaeo snrtdy

| Letter | COMMAND                      | DESCRIPTION                           | KEYBINDING | SECTION    |
|--------+------------------------------+---------------------------------------+------------+------------|
| u      | [[elisp:(helpful-command 'execute-extended-command)][execute-extended-command]]     |                                       | s-u        | [[code]]       |
| U      | [[elisp:(helpful-command 'revert-buffer)][revert-buffer]]                |                                       | s-U        |            |
| i      | [[elisp:(helpful-command 'indent-region)][indent-region]]                | reformat code                         | s-i        | [[code]]       |
| a      | [[elisp:(helpful-command 'mark-whole-buffer)][mark-whole-buffer]]            | Select all                            | s-a        | [[edit]]       |
| e      | [[elisp:(helpful-command 'ido-switch-buffer)][ido-switch-buffer]]            | Switching buffer                      | s-e        | [[buffers]]    |
| E      | [[elisp:(helpful-command 'edit-abbrevs)][edit-abbrevs]]                 |                                       | s-E        |            |
| o      | [[elisp:(helpful-command 'imenu)][imenu]] or [[elisp:(helpful-command 'consult-org-heading)][consult-org-heading]] | Menu depends on mode (imenu standard) | s-o        | [[navigation]] |
| s      | [[elisp:(helpful-command 'save-buffer)][save-buffer]]                  | Saves the buffer                      | s-s        |            |
| S      | [[elisp:(helpful-command 'ns-write-file-using-panel)][ns-write-file-using-panel]]    |                                       | s-S        |            |
| n      | [[elisp:(helpful-command '+default/new-buffer)][+default/new-buffer]]          |                                       | s-n        |            |
| N      | [[elisp:(helpful-command 'make-frame)][make-frame]]                   |                                       | s-N        |            |
| r      | prefix (menu)                | Refactoring, Run, replace             | s-r        |            |
| t      | [[elisp:(helpful-command 'ns-popup-font-panel)][ns-popup-font-panel]]          | Select a font                         | s-t        |            |
| d      | [[elisp:(helpful-command 'duplicate-line-or-region)][duplicate-line-or-region]]     | Duplicate a selection or line         | s-d        | [[edit]]       |
| y      | [[elisp:(helpful-command 'other-frame)][other-frame]]                  |                                       | s-y        |            |

** Mapping for ü to j Row

üöäpz bm,.j

| Letter | COMMAND                    | DESCRIPTION                  | KEYBINDING | SECTION    |
|--------+----------------------------+------------------------------+------------+------------|
| ü      | [[elisp:(helpful-command 'avy-goto-char-2)][avy-goto-char-2]]            |                              | s-ü        | [[navigation]] |
| ö      |                            |                              |            | [[code]]       |
| ä      | mc/mark-next-like-this     |                              | s-ä        |            |
| Ä      |                            | multiple-cursors key map     | s-Ä        |            |
| p      | mc/mark-previous-like-this |                              | s-p        |            |
| z      | [[elisp:(helpful-command 'undo-tree-undo)][undo-tree-undo]]             | undo                         | s-z        |            |
| Z      | [[elisp:(helpful-command 'undo-tree-redo)][undo-tree-redo]]             | redo                         |            |            |
| b      | [[elisp:(helpful-command 'org-emphasize)][org-emphasize]]              | Org-Mode Bold Underline Code | s-b        |            |
| m      | [[elisp:(helpful-command 'iconify-frame)][iconify-frame]]              |                              |            |            |
| ,      | [[elisp:(helpful-command 'customize)][customize]]                  |                              |            |            |
| .      | -                          |                              |            |            |
| j      | [[elisp:(helpful-command 'exchange-point-and-mark)][exchange-point-and-mark]]    |                              |            |            |
| J      | [[elisp:(helpful-command 'join-line)][join-line]]                  |                              |            | [[edit]]       |

** Mapping for F0 to F12 Row

| Letter | COMMAND | DESCRIPTION         | KEYBINDING | SECTION |
|--------+---------+---------------------+------------+---------|
| F0     |         |                     |            |         |
| F1     |         |                     |            |         |
| F2     |         |                     |            |         |
| F3     |         |                     |            |         |
| F4     |         |                     |            |         |
| F5     |         | voice over (mac os) |            |         |
| F6     |         |                     |            |         |
| F7     |         |                     |            |         |
| F8     |         |                     |            |         |
| F9     |         |                     |            |         |
| F10    |         |                     |            |         |
| F11    |         | full screen         |            |         |
| F12    |         |                     |            |         |

** Cursor up down left right
| Letter | COMMAND        | DESCRIPTION | KEYBINDING  | SECTION |
|--------+----------------+-------------+-------------+---------|
| up     | windmove-up    |             | C-s-<up>    | [[buffers]] |
|        |                |             |             |         |
|        |                |             |             |         |
|        |                |             |             |         |
| down   | windmove-down  |             | C-s-<down>  | [[buffers]] |
| left   | windmove-left  |             | C-s-<left>  | [[buffers]] |
| right  | windmove-right |             | C-s-<right> | [[buffers]] |
| Space  | [[elisp:(helpful-command 'hippie-expand)][hippie-expand]]  |             | s-SPC       |         |


** Unset key

#+begin_src emacs-lisp
(global-unset-key (kbd "A-<tab>"))
(global-unset-key (kbd "C-@"))
(global-unset-key (kbd "M-@"))
(global-unset-key (kbd "M-SPC"))
(global-unset-key (kbd "s-+"))
(global-unset-key (kbd "s--"))
(global-unset-key (kbd "s-="))
(global-unset-key (kbd "s-d"))
(global-unset-key (kbd "s-e"))
(global-unset-key (kbd "s-h"))
(global-unset-key (kbd "s-k"))
(global-unset-key (kbd "s-n"))
(global-unset-key (kbd "s-o"))
(global-unset-key (kbd "s-w"))
(global-unset-key (kbd "s-x"))
#+end_src

** <<edit>> Cut Copy Paste Undo Redo :keybindings:

#+begin_src emacs-lisp
(map!
 "s-x" #'kill-region
 "s-v" #'yank
 "s-V" #'yank-pop
 "s-c" (if (featurep 'evil) #'evil-yank #'copy-region-as-kill)
 "s-z" #'undo
 "s-Z" #'redo
 "s-a" #'mark-whole-buffer
 "s-h" #'set-mark-command
 "s-k" #'er/expand-region
 "s-K" #'er/contract-region
 "s-d" #'sim/duplicate-line-or-region
 "s-J" #'join-line
 :desc "Replace Buffer RegEx" "s-r r" #'query-replace-regexp
 :desc "Replace Buffer" "s-r s" #'query-replace
 "s-S-<up>"  #'drag-stuff-up
 "s-S-<down>"  #'drag-stuff-down
 "s-S-<left>"  #'drag-stuff-left
 "s-S-<right>"  #'drag-stuff-right
 )
#+end_src

** <<tick>> Font size increase and decrease
#+begin_src emacs-lisp
(map!
 "s-=" #'doom/reset-font-size
 "s--" #'doom/decrease-font-size
 "s-+" #'doom/increase-font-size
 )
#+end_src

** <<s-0-9>> Super Numbers
#+begin_src emacs-lisp :tangle no
(map!
 "s-1" #'+treemacs/toggle
 "s-9" #'magit-status
 "s-0" #'text-scale-adjust
 )
#+end_src

** <<code>> Basic Code Editing
#+begin_src emacs-lisp
(global-unset-key (kbd "s-C"))
(map!
 "s-i" #'indent-region
 "s-C" #'comment-line
 "s-u" #'execute-extended-command
 "s-U" #'revert-buffer
 "s-SPC" #'hippie-expand
 "s-ß" #'completion-help-at-point

 ;; Omni-completion
 (:when (modulep! :completion company)
   "s-SPC" #'+company/complete
   (:prefix "s-S-SPC"
            "l" #'+company/whole-lines
            "k" #'+company/dict-or-keywords
            "f" #'company-files
            "e" #'company-etags
            "i" #'company-ispell
            "y" #'company-yasnippet
            "c" #'company-capf
            "a" #'+company/dabbrev
            "p" #'+company/dabbrev-code-previous
            "h" #'hippie-expand
            ))
 (:when (fboundp 'avy-goto-char-2 )
   "s-ü" #'avy-goto-char-2
   "s-Ü" #'sim/fly-to-avy-tmenu

   )


 :when (modulep! :editor multiple-cursors)
 (
  :desc "Mark next"          "s-ä"         #'mc/mark-next-like-this
  :desc "Mark previous"      "s-p"         #'mc/mark-previous-like-this
  :desc "Unmark previous"    "s-P"         #'mc/unmark-previous-like-this

  :prefix-map ("s-Ä" . "multiple-cursors")
  :desc "Edit lines"         "l"         #'mc/edit-lines
  :desc "Mark next"          "n"         #'mc/mark-next-like-this
  :desc "Unmark next"        "N"         #'mc/unmark-next-like-this
  :desc "Mark previous"      "p"         #'mc/mark-previous-like-this
  :desc "Unmark previous"    "P"         #'mc/unmark-previous-like-this
  :desc "Mark all"           "t"         #'mc/mark-all-like-this
  :desc "Mark all DWIM"      "m"         #'mc/mark-all-like-this-dwim
  :desc "Edit line endings"  "e"         #'mc/edit-ends-of-lines
  :desc "Edit line starts"   "a"         #'mc/edit-beginnings-of-lines
  :desc "Mark tag"           "s"         #'mc/mark-sgml-tag-pair
  :desc "Mark in defun"      "d"         #'mc/mark-all-like-this-in-defun
  :desc "Add cursor w/mouse" "<mouse-1>" #'mc/add-cursor-on-click)
 )
#+end_src

** <<buffers>> Buffer and Frame Handling
#+begin_src emacs-lisp
(map!
 "s-e" #'ido-switch-buffer
 "s-w" #'kill-current-buffer
 "s-W" #'doom/delete-frame-with-prompt
 "s-h" #'set-mark-command
 "C-s-<up>" #'windmove-up
 "C-s-<down>" #'windmove-down
 "C-s-<left>" #'windmove-left
 "C-s-<right>" #'windmove-right
 )
#+end_src
** <<navigation>> Navigation in Textfile and Code
#+begin_src emacs-lisp
(map!
 "s-l" #'consult-goto-line
 "s-<up>" #'consult-global-mark
 "s-<down>" #'consult-mark
 "s-<left>" #'doom/backward-to-bol-or-indent
 "s-<right>" #'doom/forward-to-last-non-comment-or-eol
 "s-o" #'imenu
 )

(general-def
  :keymaps 'org-mode-map
  "s-o" 'consult-org-heading
  "s-b" 'org-emphasize
  ;; "s-<return>" 'org-meta-return
  )
#+end_src


* Keyboard Macros
This Section defines some Macros for reuse.

#+begin_src emacs-lisp
(after! xah-fly-keys
  (defalias 'sim/org-h3-date
    (xah-fly-command-mode-activate)
    (kmacro "r * * * SPC C-c . <return> <left> S-<up> <right> SPC"))
  )
#+end_src

* Last Action

#+begin_src emacs-lisp
;; (after! doom-modeline
;; (global-hide-mode-line-mode))
(sim/flykeys-on)
#+end_src

#+begin_src emacs-lisp :tangle no
(after! ox
  (load! "ox-koma-letter"))

(after! ox-koma-letter
  '(progn
     (setq org-koma-letter-default-class "brief")))
#+end_src
