#+TITLE: Einstellungen Configuration
* Einstellungen :settings:
** Darstellung :appearance:
#+begin_src emacs-lisp
(display-time-mode t)
(setq display-time-24hr-format t)
(setq display-line-numbers-type nil)
(load! "sim-calendar")
(load! "~/.emacs.secrets")
(setq fill-column sim-hard-wrap-at)
;; Theme related things
(load! "+themes")

(use-package! beacon
  :diminish
  :config (setq beacon-color "#9a37ff")
  (beacon-mode t)
  )

;; Select and raise the frame, always
(select-frame-set-input-focus (selected-frame))

;; Select popup buffers by default
;; (setq +popup-defaults
;;       (list :side   'bottom
;;             :height 0.16
;;             :width  40
;;             :quit   t
;;             :select t
;;             :ttl    5))
#+end_src
*** Prety Symbol Mode Disable
https://github.com/hlissner/doom-emacs/issues/1807

#+begin_src emacs-lisp
                                        ;(setq +pretty-code-enabled-modes nil)
;; or
                                        ;(remove-hook 'after-change-major-mode-hook #'+pretty-code-init-pretty-symbols-h)
;; (setq! +ligatures-composition-alist nil)
#+end_src
** Editor Erweiterungen :editor:
*** Rechtschreibprüfung :spell:checking:
#+begin_src emacs-lisp
(setq ispell-dictionary "de_DE")
(setq ispell-hunspell-dict-paths-alist
      '(("de_DE" "~/Library/Spelling/de_DE.aff")))
#+end_src
*** Tastaturlayout :keyboard:layout:
#+begin_src emacs-lisp
(load! "+neo-layout.el")
(load! "+modifier.el")
#+end_src

*** Multiple Cursors
#+begin_src emacs-lisp
(after! mc-mark-more
  (setq! mc/list-file "~/.e/sieman/mc-lists.el")
  (define-key mc/keymap (kbd "<return>") nil)
  (message "mc-mark-more loaded")
  )
#+end_src
*** Ivy is a generic completion mechanism for Emacs.
#+begin_src emacs-lisp
(after! ivy
  (ido-mode -1)
  (global-unset-key (kbd "s-x"))
  (general-define-key "s-x" 'kill-region))
#+end_src
*** Navigate Back and Forward, the Better Jump
Ich mag in einem Buffer herumspringen.
#+begin_src emacs-lisp
(after! better-jumper
  (setq! better-jumper-context 'buffer)
  (setq! better-jumper-use-savehist t)
  (setq! better-jumper-use-evil-jump-advice nil))
#+end_src

*** Show Keys
Dies ist ein Minor-Mode und zeigt die gedrückten Tasten an.
#+begin_src emacs-lisp
(load! "+show-keys.el")
#+end_src

** Modus Anwendungen :settings:modes:
*** dired
#+begin_src emacs-lisp
(after! dired
  (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))
  (put 'dired-find-alternate-file 'disabled nil))
#+end_src

*** org-mode :org:
#+begin_src emacs-lisp
;; (with-eval-after-load 'org
;; (add-to-list 'sp-ignore-modes-list #'org-mode))
;; (with-eval-after-load 'org-agenda
;; (add-to-list 'sp-ignore-modes-list #'org-agenda-mode))

(after! org
  (add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src clojure"))

  (setq org-use-speed-commands t)
  ;(require 'ob-clojure)
  (setq org-babel-clojure-backend 'cider)

  )

(add-hook! 'org-log-buffer-setup-hook '(require 'org-keys))
#+end_src

*Babel Support*
Ich möchte gerne Ergebnisse aus Clojures Code mit in org-Dateien einfügen.
[[https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-clojure.html][Org-babel support for Clojure]]
*** Deft for org-mode

#+begin_src emacs-lisp
(setq deft-extensions '("txt" "tex" "org"))
(setq deft-directory "~/Documents/orgs")
(setq deft-recursive t)
(global-set-key [f8] 'deft)
#+end_src

*** smartparens
#+begin_src emacs-lisp
;; ;; (after! 'smartparens-mode
;;   (global-unset-key (kbd "C-M-f") );)) ; . sp-forward-sexp)
;;   (global-unset-key (kbd "C-M-b"));)) ; . sp-backward-sexp)
;;   (global-unset-key (kbd "C-M-d")) ; . sp-down-sexp)
;;   (global-unset-key (kbd "C-M-a")) ; . sp-backward-down-sexp)
;;   (global-unset-key (kbd "C-S-d")) ; . sp-beginning-of-sexp)
;;   (global-unset-key (kbd "C-S-a")) ; . sp-end-of-sexp)
;;   (global-unset-key (kbd "C-M-e")) ; . sp-up-sexp)
;;   (global-unset-key (kbd "C-M-u")) ; . sp-backward-up-sexp)
;;   (global-unset-key (kbd "C-M-n")) ; . sp-next-sexp)
;;   (global-unset-key (kbd "C-M-p")) ; . sp-previous-sexp)
;;   (global-unset-key (kbd "C-M-k")) ; . sp-kill-sexp)
;;   (global-unset-key (kbd "C-M-w")) ; . sp-copy-sexp)
;;   (global-unset-key (kbd "M-<delete>")) ; . sp-unwrap-sexp)
;;   (global-unset-key (kbd "M-<backspace>")) ; . sp-backward-unwrap-sexp)
;;   (global-unset-key (kbd "C-<right>")) ; . sp-forward-slurp-sexp)
;;   (global-unset-key (kbd "C-<left>")) ; . sp-forward-barf-sexp)
;;   (global-unset-key (kbd "C-M-<left>")) ; . sp-backward-slurp-sexp)
;;   (global-unset-key (kbd "C-M-<right>")) ; . sp-backward-barf-sexp)
;;   (global-unset-key (kbd "M-D")) ; . sp-splice-sexp)
;;   (global-unset-key (kbd "C-M-<delete>")) ; . sp-splice-sexp-killing-forward)
;;   (global-unset-key (kbd "C-M-<backspace>")) ; . sp-splice-sexp-killing-backward)
;;   (global-unset-key (kbd "C-S-<backspace>")) ; . sp-splice-sexp-killing-around)
;;   (global-unset-key (kbd "C-]")) ; . sp-select-next-thing-exchange)
;;   (global-unset-key (kbd "C-M-]")) ; . sp-select-next-thing)
;;   (global-unset-key (kbd "C-M-SPC")) ; . sp-mark-sexp)
;;   (global-unset-key (kbd "M-F")) ; . sp-forward-symbol)
;;   (global-unset-key (kbd "M-B")) ; . sp-backward-symbol)
;; ;; )
;; (custom-set-variables
 ;; '(sp-override-key-bindings (quote (("C-<right>") ("C-<left>")))))

(defun sim/disable-smartparens ()
  "Disable smartparens mode globaly."
  (interactive)
  (turn-off-smartparens-mode)
  (turn-off-smartparens-strict-mode)
  (smartparens-global-mode -1)
  )
#+end_src
*** Terminals

**** Ansi-Terminal

C-c C-j (term-line-mode) das Terminal verhält sich wie ein Text-Buffer.
C-c C-k (term-char-mode) das Terminal verhält fixirt den Cursor auf den Eingabe-Promt.

C-c C-q (term-pager-toggle)

C-c C-c (term-send-raw)
C-c C-x (term-send-raw)


https://echosa.github.io/blog/2012/06/06/improving-ansi-term/
Wenn man =exit= ins Terminal eingibt beendet sich das Terminal und der Buffer soll sich dabei auch schießen.

#+begin_src emacs-lisp
(defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
  (if (memq (process-status proc) '(signal exit))
      (let ((buffer (process-buffer proc)))
        ad-do-it
        (kill-buffer buffer))
    ad-do-it))
(ad-activate 'term-sentinel)
#+end_src

Ich benutze die Z-Shell und ich möchte auch nicht mehr nach einer anderen Shell gefragt werden.

#+begin_src emacs-lisp
(defvar my-term-shell "/bin/zsh")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
#+end_src

*** Sublimity
Die Sublimity-Erweiterung bietet Sublime ähnliches weiches scolling und experimentelle Minimap.

You can also require sublimity-attractive if you want to center everything for a distraction-free mode.  I do not use this extension, hence the reason I have sublimity-mode set to 0.  Set this to 1 to enable it.
#+begin_src emacs-lisp
(require 'sublimity-scroll)
(require 'sublimity-map)
(require 'sublimity-attractive)
(sublimity-mode 0)
#+end_src
*** Cider Clojure Enviroment
Ich möchte gerne eine Historie für die REPL haben.

#+begin_src emacs-lisp
;; (after! cider
(set-popup-rule! "^\\*cider-clojuredocs\\*" :side 'right :size 0.5)
  ;; )
;; (after! cider-repl-mode
;;   (setq cider-repl-history-size 100000
;;         cider-repl-history-file "~/.organisation/snippedlab/clojure-repl-history"
;;         ))
;; (add-hook! 'cider-mode-hook
  ;; (setq cider-repl-history-size 10000
;;        cider-repl-history-file "~/.organisation/snippedlab/clojure-repl-history"
        ;; ))
#+end_src
*** Fly Keys by Xah Lee
 #+begin_src emacs-lisp
(after! xah-fly-keys
  (defun sim/flykeys-indicate-command-mode () (interactive)
         (custom-set-faces
          `(cursor ((t (:background "blue"))))
          )
         ;; (face-attribute 'default :background) ; get current background color
         (set-frame-parameter (selected-frame) 'alpha '(92 . 90))
         (custom-set-variables '(cursor-type 'hollow)))

  (defun sim/flykeys-indicate-insert-mode () (interactive)
         (custom-set-faces
          `(cursor ((t (:background "red"))))
          )
         (set-frame-parameter (selected-frame) 'alpha '(100 . 100))
         (custom-set-variables '(cursor-type 'box)))

  (add-hook 'xah-fly-command-mode-activate-hook 'sim/flykeys-indicate-command-mode)
  (add-hook 'xah-fly-insert-mode-activate-hook  'sim/flykeys-indicate-insert-mode)
  (message "xah-fly-keys custom settings loaded"))
 #+end_src
* Funktionen
Hier stehen Funktionen, die für die Tastenkürzel verwendet werden.
** Ist das Packet das, das ich gebrauche?
(if (require 'tee nil 'noerror)
(message "Ja ist installiert")
(message "Nein ist nicht installiert"))

#+begin_src emacs-lisp
(if (require 'general nil 'noerror)
    (message "neo-keybinding")
  (package-install 'general))

(defun nk/check-package (name fct)
  "Is package installed then executes fct otherwise give a message."
  (interactive)

  (if (require  name nil 'noerror)
      (funcall-interactively fct)
    (message (concat "neo-keybinding missing package: " (symbol-name name)))))
#+end_src

** Upper Lower Case Toggle
Toggle case for word at caret or selected block
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Case.html][Toggle Case Description]]

#+Begin_src emacs-lisp
(defun xah-toggle-letter-case ()
  "Toggle the letter case of current word or text selection.
     Always cycle in this order: Init Caps, ALL CAPS, all lower.
     URL `http://ergoemacs.org/emacs/modernization_upcase-word.html'
     Version 2019-11-24"
  (interactive)
  (let (
        (deactivate-mark nil)
        $p1 $p2)
    (if (use-region-p)
        (setq $p1 (region-beginning) $p2 (region-end))
      (save-excursion
        (skip-chars-backward "0-9A-Za-z")
        (setq $p1 (point))
        (skip-chars-forward "0-9A-Za-z")
        (setq $p2 (point))))
    (when (not (eq last-command this-command))
      (put this-command 'state 0))
    (cond
     ((equal 0 (get this-command 'state))
      (upcase-initials-region $p1 $p2)
      (put this-command 'state 1))
     ((equal 1 (get this-command 'state))
      (upcase-region $p1 $p2)
      (put this-command 'state 2))
     ((equal 2 (get this-command 'state))
      (downcase-region $p1 $p2)
      (put this-command 'state 0)))))
#+end_src
** Duplicate Line Or Region

#+begin_src emacs-lisp
(defun duplicate-line-or-region (&optional n)
  "Duplicate current line, or region if active.
      With argument N, make N copies.
      With negative N, comment out original line and use the absolute value."
  (interactive "*p")
  (let ((use-region (use-region-p)))
    (save-excursion
      (let ((text (if use-region        ;Get region if active, otherwise line
                      (buffer-substring (region-beginning) (region-end))
                    (prog1 (thing-at-point 'line)
                      (end-of-line)
                      (if (< 0 (forward-line 1)) ;Go to beginning of next line, or make a new one
                          (newline))))))
        (dotimes (i (abs (or n 1)))     ;Insert N times, or once if not specified
          (insert text))))
    (if use-region nil                  ;Only if we're working with a line (not a region)
      (let ((pos (- (point) (line-beginning-position)))) ;Save column
        (if (> 0 n)                             ;Comment out original with negative arg
            (comment-region (line-beginning-position) (line-end-position)))
        (forward-line 1)
        (forward-char pos)))))

#+end_src

** Color Themes

#+begin_src emacs-lisp
(defun sim/after-theme-changed ()
  "Custom face settings after theme changed."
  (interactive)
                                        ;(org-bullets-mode nil)
                                        ;(org-bullets-mode t)
  (set-face-attribute 'mode-line nil :font "JetBrains Mono 12")
  (custom-set-faces
   '(show-paren-match ((t (:background "black" :foreground "yellow" :inverse-video t :weight bold))))
   '(region ((t (:foreground "#f1c40f" :background "#2c3e50" :inverse-video t))))
   `(cursor ((t (:foreground "white" :background "red"))))
   )
  (custom-set-variables '(cursor-type 'box))
  (setq doom-modeline-height 20)
  (message "sim/after-theme-changed done")
  )

(defun sim/disable-all-custom-themes ()
  "Disable all themes and then load a single theme interactively."
  (interactive)
  (while custom-enabled-themes
    (disable-theme (car custom-enabled-themes))) )
#+end_src
** Goto Line
- =M-g M-g   = goto line number and shows line numbers
  #+begin_src emacs-lisp
(defun goto-line-with-feedback ()
  "Show line numbers temporarily, while prompting for the line number input"
  (interactive)
  (unwind-protect
      (progn
        (linum-mode 1)
        (call-interactively 'goto-line))
    (linum-mode -1)))
  #+end_src
** Beschreibe Tastenkürzeltabellen Describe Keymap
Ein nützliches Schnippel zum Beschreiben von einzelnen Keymaps von [[https://stackoverflow.com/questions/3480173/show-keys-in-emacs-keymap-value][stackoverflow]].
#+begin_src emacs-lisp
(defun sim/describe-keymap (keymap)
  "Describe a keymap using `substitute-command-keys'."
  (interactive
   (list (completing-read
          "Keymap: " (let (maps)
                       (mapatoms (lambda (sym)
                                   (and (boundp sym)
                                        (keymapp (symbol-value sym))
                                        (push sym maps))))
                       maps)
          nil t)))
  (with-output-to-temp-buffer (format "*keymap: %s*" keymap)
    (princ (format "%s\n\n" keymap))
    (princ (substitute-command-keys (format "\\{%s}" keymap)))
    (with-current-buffer standard-output ;; temp buffer
      (setq help-xref-stack-item (list #'my-describe-keymap keymap)))))
#+end_src

** (de)activate Alt Modifier
#+begin_src emacs-lisp
(defun sim/disable-alt-modifier ()
  (interactive)
  (setq mac-option-modifier 'none
        mac-right-option-modifier 'none)
  (message "Modifier Option set to none"))

(defun sim/enable-alt-modifier ()
  (interactive)
  (setq mac-option-modifier 'alt
        mac-right-option-modifier 'alt)
  (message "Modifier Option set to alt"))
#+end_src
** (de)activate Fly Keys by Xah Lee

#+begin_src emacs-lisp
(defun sim/flykeys-on ()
    (interactive)
  (require 'xah-fly-keys)
  (xah-fly-keys-set-layout "neo2")
  ;; (xah-fly-keys-set-layout "qwerty")
  (xah-fly-keys 1)
  ;; (setq mac-command-modifier 'hyper)
  ;; (setq mac-command-modifier (lambda ()
                                ;; (interactive) (message "xah-fly-command-mode-activate"))
  ;; (general-define-key "<hyper>" 'xah-fly-command-mode-activate)
  ;;(global-set-key [(hyper)] 'xah-fly-command-mode-activate)
  (define-key xah-fly-key-map (kbd "<home>") 'xah-fly-mode-toggle)
  )

(defun sim/flykeys-off ()
    (interactive)
  (xah-fly-keys-off)
  (setq mac-command-modifier 'super)
  )
#+end_src
* Keybinding
** Function Keys Row
*** <f1>
Idea:
- <f1> view *Quick Documentation*
- S-<f1> view *External Documentation*
- s-<f1> view *error description*
- A-<f1> navigate *select in*
*** <f2>
Idea:
- <f2> navigate to *next highlighted error*
- s-<f2> run *stop*

*** <f3>
Idea:
- <f3> navigate *toggle bookmarks*
- s-<f3> navigate *show bookmarks*
  -
*** <f4>
Idea: view *jump to source*
*** <f5>
Idea: refactor *copy*
**** Next highlighted error
#+begin_src emacs-lisp
(general-define-key "<f5>" 'next-error)
#+end_src

*** <f6>
*** <f7>
*** <f8>
*** <f9>
*** <f10>
**** Highlight Symbols Phrases ...
- =F6   = Highlight a Symbol under the cursor
- =C-F6 = Highlight a Search Pattern with custome color
  #+begin_src emacs-lisp
(general-define-key "<f10>" 'highlight-symbol-at-point
                    "C-<f10>" 'highlight-phrase)
  #+end_src

*** <f11>
If you search with none alpha numerics signs like (
#+begin_src emacs-lisp
(general-define-key
 "C-<f11>" 'sim/disable-alt-modifier
 "s-<f11>" 'sim/enable-alt-modifier
 )
#+end_src
*** <f12>
**** File Structure
=C-<F12>  =
Shows quick jumping points of the structure in the file.
#+begin_src emacs-lisp
(general-define-key "C-<f12>" 'imenu)
(general-define-key "C-S-<f12>" 'imenu-anywhere)
#+end_src

** Number Row
*** 1 °
#+begin_src emacs-lisp
(general-define-key "s-1" '+treemacs/toggle)
#+end_src
*** 2 §
*** 3 ℓ
**** New Window
#+begin_src emacs-lisp
(defun split-window-right-and-move-there-dammit ()
  (interactive)
  (split-window-right)
  (windmove-right))

(global-set-key (kbd "C-x 3") 'split-window-right-and-move-there-dammit)
#+end_src

*** 4 »
*** 5 «
*** 6 $
*** 7 €
*** 8 „
*** 9 “
#+begin_src emacs-lisp
(general-define-key
 "s-9" 'magit-status)
#+end_src
*** 0 ”
*** - —
** Upper Row
*** x X
*** v V :paste:history:clipboard:
Shows a popup menu with a history kills, it's like a clipboard history.
#+begin_src emacs-lisp
(if (require 'browse-kill-ring nil 'noerror)
    (general-define-key "s-V" 'browse-kill-ring)
  (general-define-key "s-V" '(lambda ()
                               (interactive)
                               (popup-menu 'yank-menu))))
(after! term
  (general-def term-raw-map
     "s-v" 'term-paste))
#+end_src

*** l L
*** c C
Comment or uncomment a line or region.
#+begin_src emacs-lisp
(global-unset-key (kbd "s-C"))
(general-define-key "s-C" 'comment-line
                    "M-s-c" 'comment-or-uncomment-region)
#+end_src

*** w W :buffer:
#+begin_src emacs-lisp
(global-unset-key (kbd "s-w"))
(general-define-key "s-w" 'kill-current-buffer)

(general-def org-src-mode-map
  "s-w" 'org-edit-src-exit)
#+end_src
*** k K
#+begin_src emacs-lisp
(global-unset-key (kbd "s-k"))
#+end_src
*** h H < :multiple:cursors:
#+begin_src emacs-lisp
(general-define-key
 "A-s-<" 'mc/mark-previous-like-this
 "A-s-h" 'mc/mark-previous-like-this)
#+end_src
*** g G > :search:multiple:cursors:
#+begin_src emacs-lisp
(general-define-key "s-G" 'isearch-repeat-backward)

(general-define-key
 "A-s->" 'mc/mark-next-like-this
 "A-s-g" 'mc/mark-next-like-this)
#+end_src
**** Goto Line
- =M-g M-g   = goto line number and shows line numbers
  #+begin_src emacs-lisp
(global-set-key [remap goto-line] 'goto-line-with-feedback)
  #+end_src


*** f F :search:org:
Remaping for org-mode. The meta key is maped to fn-key, with cursor it behaves diffrent.
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'org-mode-map
 ;; forword right
 "C-f" 'org-metaright
 )
#+end_src

#+begin_src emacs-lisp
(general-define-key  "s-F r" 'isearch-forward-regexp)
;; (nk/check-package 'swiper (lambda ()(general-define-key
;;                                      "s-F s" 'swiper-isearch
;;                                      "s-F S" 'swiper-isearch-backward
;;                                      "s-F 7" 'swiper-mc) ))

(if (require  'avy
              nil 'noerror)
    (general-define-key
     "s-F a" 'avy-goto-char)

  (if (require  'ace-jump-mode nil 'noerror)
      (general-define-key
       "s-F a" 'ace-jump-char-mode)
    (message "neo-keybinding missing package: avy or ace-jump-mode")))
#+end_src
*** q Q
*** ß ẞ
** Center Row
*** u U
Idea:
- s-U *Main menu | Navigate | Go to Super Method*

upper Lower Case Toggle

#+begin_src emacs-lisp
;; (nk/check-package 'xah-fly-keys
;;                   (lambda () (general-define-key "C-S-u" 'xah-toggle-letter-case)))
(global-unset-key (kbd "s-u"))
(general-define-key
 "s-U" 'xah-toggle-letter-case)
#+end_src

*** i I
*** a A
#+begin_src emacs-lisp
(general-define-key
 "\C-xm" 'execute-extended-command
 "M-X" 'execute-extended-command
 "\C-x\C-m" 'execute-extended-command
 "s-A" 'execute-extended-command)
#+end_src
*** e E
**** Switch buffer
- =s-e     =
- =C-x C-b =
- =C-x b   =
  Switch to another buffer.
  #+begin_src emacs-lisp
(global-unset-key (kbd "s-e"))
(general-define-key "s-e" 'ido-switch-buffer
                    "C-x C-b" 'ibuffer
                    "C-x b" 'ido-switch-buffer)
  #+end_src

*** o O
#+begin_src emacs-lisp
(global-unset-key (kbd "s-o"))
;;((general-define-key "s-o" 'counsel-find-file)

(general-define-key :prefix "s-O"
                    "p" 'ns-open-file-using-panel
                    "m" 'execute-extended-command)

(map! :after ivy :map ivy-mode-map :prefix "s-O"
      :desc "recent files" "r" #'counsel-recentf
      :desc "open file" "f" #'counsel-find-file)

(general-def org-mode-map
  "s-o" 'counsel-org-goto)

(general-def org-mode-map
  :prefix "s-O"
  "o" 'org-open-at-point
  "s" 'org-edit-special)

(general-def cider-repl-mode-map
  "s-o" 'cider-repl-history)
#+end_src
*** s S

#+begin_src emacs-lisp
(general-def cider-repl-mode-map
  "s-s" 'cider-repl-history-save)
#+end_src
*** n N :org:
#+begin_src emacs-lisp
(global-unset-key (kbd "s-n"))
#+end_src
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'org-mode-map
 ;; next down
 "C-n" 'org-metadown
 )
#+end_src
*** r R
*** t T
**** Appearance Text Scale remapping keybindings
#+BEGIN_SRC emacs-lisp
(general-define-key "C-x C-A-t" 'text-scale-decrease)
#+END_SRC


*** d D
#+begin_src emacs-lisp
(global-unset-key (kbd "s-d"))
(general-define-key "s-d" 'duplicate-line-or-region)
#+end_src
*** y Y
** Lower Row
*** ü Ü
*** ö Ö
*** ä Ä :cursor:jump:
Cursor Jumps [[https://github.com/abo-abo/avy][Avy-Mode]] like [[https://github.com/winterTTr/ace-jump-mode][Ace-Jump-Mode]]
#+begin_src emacs-lisp
(general-define-key
 "s-ä" 'avy-goto-char-2
 "s-Ä c" 'avy-goto-char
 "s-Ä l" 'avy-goto-line
 "s-Ä w" 'avy-goto-word-1
 "s-Ä o" 'avy-org-goto-heading-timer
 )
#+end_src
*** p P :org:
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'org-mode-map
 ;; previous up
 "C-p" 'org-metaup
 )
#+end_src
*** z Z :undo:redo:
- =C-z   = undo
- =C-S-z = redo
- =C-x u = Show the undo-tree


  #+begin_src emacs-lisp
(nk/check-package 'undo-tree
                  (lambda () (global-unset-key (kbd "C-/"))
                    (global-unset-key (kbd "C-_"))
                    (general-define-key "C-z" 'undo-tree-undo
                                        "C-Z" 'undo-tree-redo
                                        "s-Z" 'undo-tree-redo)))
  #+end_src

*** b B :org:
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'org-mode-map
 ;; backward left
 "C-b" 'org-metaleft
 )
#+end_src
**** Appearance Text Scale remapping keybindings
#+BEGIN_SRC emacs-lisp
(general-define-key "C-x C-A-b" 'text-scale-increase
                    "C-x C-A-t" 'text-scale-decrease)
#+END_SRC


*** m M
The keybinding =C-m= effects a =return=, and I think that's a bug.
#+begin_src emacs-lisp
(define-key input-decode-map [?\C-m] [C-m])
;;(general-define-key "<C-m>" '(lambda () (interactive) (message "C-m is not the same as RET any more!")))
#+end_src
*** , –
**** Spell Checking
#+begin_src emacs-lisp
(nk/check-package 'flyspell-correct
                  (lambda () (general-define-key "C-M-," 'flyspell-correct-wrapper)))
#+end_src

*** . •
*** j J :join:line:
*C-S-j*
Join this line to previous and fix up whitespace at join.
#+begin_src emacs-lisp
(general-define-key "C-S-j" 'join-line
                    "s-J" 'join-line)
#+end_src

** Space Return Backspace Delete Up Down Right Left Tab
*** return
#+begin_src emacs-lisp
(general-define-key
 ;; NOTE: keymaps specified with :keymaps must be quoted
 :keymaps 'org-mode-map
 "s-<return>" 'org-meta-return
 )
#+end_src
*** Cursor Jump to other Buffer
- =A-S-<up>    = jump a window up
- =A-S-<down>  = jump a window down
- =A-S-<left>  = jump a window left
- =A-S-<right> = jump a window right
  #+begin_src emacs-lisp
(nk/check-package 'windmove (lambda ()
                              (general-define-key "<A-S-right>" 'windmove-right
                                                  "<A-S-left>" 'windmove-left
                                                  "<A-S-up>" 'windmove-up
                                                  "<A-S-down>" 'windmove-down) ))
  #+end_src

*** Cursor hoch runter :text:move:select:

#+begin_src emacs-lisp
(nk/check-package 'move-text (lambda () (general-define-key
                                         "s-S-<up>"  'move-text-up
                                         "s-S-<down>"  'move-text-down)))
#+end_src


Erweitere und schrumpfe den selektierten Text.

#+begin_src emacs-lisp
(nk/check-package 'expand-region
                  (lambda () (general-define-key
                              "A-<up>"  'er/expand-region
                              "A-<down>" 'er/contract-region))
                  )
#+end_src

*** Cursor links und rechts :cursor:move:
Ich habe mich schon so an den Mac Standard gewöhnt, das ich ihn auch bei Emacs haben möchte.
#+begin_src emacs-lisp
(general-define-key "s-<right>" 'move-end-of-line
                    "s-<left>" 'move-beginning-of-line)
#+end_src

Springt zu den letzten Punktion, wo sich der Cursor befand.
#+begin_src emacs-lisp
(general-define-key "A-s-<left>" 'better-jumper-jump-backward
                    "A-s-<right>" 'better-jumper-jump-forward)
#+end_src

**** Smatparam Bug
Normalerweise springt man mit c-right oder c-left über Wörter hinweg, die Tasten
werden smartparens überschrieben. Wenn ich mit dem Mode umgehen kann, kann ich
mir überlegen, ob ich eine andere Zuordnung bevorzuge.

#+begin_src emacs-lisp
(general-define-key
 "A-<left>" 'left-word
 "A-<right>" 'right-word)
#+end_src

*** Leertaste Space Key :multiple:cursors:

#+begin_src emacs-lisp
(global-unset-key (kbd "A-<tab>"))
(global-unset-key (kbd "C-@"))
(global-unset-key (kbd "M-SPC"))
(global-unset-key (kbd "M-@"))

(general-define-key  "M-SPC" 'set-mark-command)
(general-define-key  "s-SPC" 'set-mark-command)
#+end_src

Select Text and Fast

- =C-c m c = Add one cursor to each line of the active region.
- =C-c m a = Find and mark all the parts of the buffer matching the currently active region

  #+begin_src emacs-lisp
(general-define-key
 "S-s-SPC c" 'mc/edit-lines
 "S-s-SPC a" 'mc/mark-all-like-this
 "S-s-SPC p" 'mark-paragraph
 )
  #+end_src

*** Tab
Manchmal kommen snippets in den Weg und ich möchte nur einrücken.
#+begin_src emacs-lisp
(general-define-key
 "C-<tab>" 'indent-for-tab-command)
#+end_src
** TODO Macro Step jumps into source code (lisp)
Zeigt den Inhalt von elip Funktionen.
#+BEGIN_SRC emacs-lisp
(if (require 'macrostep nil 'noerror)
    (require 'macrostep)
  (message "neo-keybinding missing package: macrostep"))
#+END_SRC

** TODO Searching
- =C-S   =
  #+begin_src emacs-lisp
(nk/check-package 'swiper (lambda ()(general-define-key
                                     "C-S-s" 'swiper-isearch
                                     "C-S-r" 'swiper-isearch-backward
                                     "C-7" 'swiper-mc) ))
  #+end_src
