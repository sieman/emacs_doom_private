* Funktionen
  Hier stehen Funktionen, die für die Tastenkürzel verwendet werden.
** Ist das Packet das, das ich gebrauche?
  (if (require 'tee nil 'noerror)
  (message "Ja ist installiert")
  (message "Nein ist nicht installiert"))

  #+begin_src emacs-lisp
    (if (require 'general nil 'noerror)
        (message "neo-keybinding")
      (package-install 'general))

    (defun nk/check-package (name fct)
      "Is package installed then executes fct otherwise give a message."
      (interactive)

      (if (require  name nil 'noerror)
          (funcall-interactively fct)
        (message (concat "neo-keybinding missing package: " (symbol-name name)))))
  #+end_src

** Upper Lower Case Toggle
   Toggle case for word at caret or selected block
   [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Case.html][Toggle Case Description]]

   #+Begin_src emacs-lisp
     (defun xah-toggle-letter-case ()
       "Toggle the letter case of current word or text selection.
     Always cycle in this order: Init Caps, ALL CAPS, all lower.
     URL `http://ergoemacs.org/emacs/modernization_upcase-word.html'
     Version 2019-11-24"
       (interactive)
       (let (
             (deactivate-mark nil)
             $p1 $p2)
         (if (use-region-p)
             (setq $p1 (region-beginning) $p2 (region-end))
           (save-excursion
             (skip-chars-backward "0-9A-Za-z")
             (setq $p1 (point))
             (skip-chars-forward "0-9A-Za-z")
             (setq $p2 (point))))
         (when (not (eq last-command this-command))
           (put this-command 'state 0))
         (cond
          ((equal 0 (get this-command 'state))
           (upcase-initials-region $p1 $p2)
           (put this-command 'state 1))
          ((equal 1 (get this-command 'state))
           (upcase-region $p1 $p2)
           (put this-command 'state 2))
          ((equal 2 (get this-command 'state))
           (downcase-region $p1 $p2)
           (put this-command 'state 0)))))
   #+end_src
** Color Themes
   #+begin_src emacs-lisp
     (defun nk/after-theme-changed ()
       "Custom face settings after theme changed."
       (interactive)
       (org-bullets-mode nil)
       (org-bullets-mode t)
       (set-face-attribute 'mode-line nil :font "JetBrains Mono 12")
       (custom-set-faces
        '(show-paren-match ((t (:background "red" :foreground "blue" :inverse-video t :weight bold))))
        '(region ((t (:foreground "#f1c40f" :background "#2c3e50" :inverse-video t))))
        `(cursor ((t (:foreground "white" :background "red"))))
        )
       (setq doom-modeline-height 20)
       (message "nk/after-theme-changed done")
       )

     (defun disable-all-custom-themes ()
       "Disable all themes and then load a single theme interactively."
       (interactive)
       (while custom-enabled-themes
         (disable-theme (car custom-enabled-themes))) )
   #+end_src
** Goto Line
    - =M-g M-g   = goto line number and shows line numbers
    #+begin_src emacs-lisp
      (defun goto-line-with-feedback ()
        "Show line numbers temporarily, while prompting for the line number input"
        (interactive)
        (unwind-protect
            (progn
              (linum-mode 1)
              (call-interactively 'goto-line))
          (linum-mode -1)))
    #+end_src
