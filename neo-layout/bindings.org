#+TITLE: Keybinding on Neo-Layout
* Default super binding to rethinking

|            |                                         |                         |
| <s-f11>    | ??                                      |                         |
| <s-kp-bar> | shell-command-on-region                 |                         |
| <s-left>   | move-beginning-of-line                  |                         |
| <s-right>  | move-end-of-line                        |                         |
| M-s h l    | $$ highlight-lines-matching-regexp      |                         |
| M-s-˙      | M-s-h                                   |                         |
| M-s-h      | ns-do-hide-others                       |                         |
| s-         | shell-command-on-region                 |                         |
| s--        | center-line                             |                         |
| s-,        | customize                               |                         |
| s-:        | ispell                                  |                         |
| s-?        | info                                    |                         |
| s-'        | next-multiframe-window                  |                         |
| s-&        | kill-current-buffer                     |                         |
| s-`        | other-frame                             |                         |
| s-^        | kill-some-buffers                       |                         |
| s-~        | ns-prev-frame                           |                         |
| s-1        | neotree-toggle                          |                         |
| s-a        | mark-whole-buffer                       |                         |
| s-c        | ns-copy-including-secondary             |                         |
| s-C        | ns-popup-color-panel                    |                         |
| s-D        | dired                                   |                         |
| s-d        | isearch-repeat-backward                 | Deleted                 |
| s-e        | ido-switch-buffer                       |                         |
| s-f        | isearch-forward                         | Search-Prefix           |
| s-g        | isearch-repeat-forward                  | isearch-repeat-backward |
| s-h        | ns-do-hide-emacs                        |                         |
| s-H        | ns-do-hide-others                       |                         |
| s-j        | exchange-point-and-mark                 |                         |
| s-J        | join-line                               |                         |
| s-k        | kill-current-buffer                     | unset                   |
| s-l        | goto-line                               |                         |
| s-L        | shell-command                           |                         |
| s-m        | iconify-frame                           |                         |
| s-M        | manual-entry                            |                         |
| s-n        | make-frame                              | Deleted                 |
| s-o        | ns-open-file-using-panel                |                         |
| s-p        | ns-print-buffer                         |                         |
| s-q        | save-buffers-kill-emacs                 |                         |
| s-S        | ns-write-file-using-panel               |                         |
| s-s        | save-buffer                             |                         |
| s-SPC      | set-mark-command                        |                         |
| s-t        | ns-popup-font-panel                     |                         |
| s-U        | xah-toggle-letter-case                  |                         |
| s-v        | yank                                    |                         |
| s-w        | new ido-kill-buffer  (old) delete-frame |                         |
| s-x        | kill-region                             |                         |
| s-y        | ns-paste-secondary                      |                         |
| s-z        | undo                                    |                         |
| s-Z        | undo-tree-redo                          |                         |
* Function Keys Row
** <f1>
Idea:
- <f1> view *Quick Documentation*
- S-<f1> view *External Documentation*
- s-<f1> view *error description*
- A-<f1> navigate *select in*
** <f2>
Idea:
- <f2> navigate to *next highlighted error*
- s-<f2> run *stop*

** <f3>
Idea:
- <f3> navigate *toggle bookmarks*
- s-<f3> navigate *show bookmarks*
  -
** <f4>
Idea: view *jump to source*
** <f5>
Idea: refactor *copy*
** <f6>
** <f7>
** <f8>
** <f9>
** <f10>
** <f11>
If you search with none alpha numerics signs like (
#+begin_src emacs-lisp
(general-define-key
 "C-<f11>" '(lambda () (interactive)(setq mac-option-modifier 'none) (message "Modifier Option set to none"))
 "s-<f11>" '(lambda () (interactive)(setq mac-option-modifier 'alt) (message "Modifier Option set to alt"))
 )
#+end_src
** <f12>
* Number Row
** 1 °
#+begin_src emacs-lisp
(general-define-key "s-1" '+treemacs/toggle)
#+end_src
** 2 §
** 3 ℓ
** 4 »
** 5 «
** 6 $
** 7 €
** 8 „
** 9 “
** 0 ”
** - —
* Upper Row
** x X
** v V                                              :paste:history:clipboard:
Shows a popup menu with a history kills, it's like a clipboard history.
#+begin_src emacs-lisp
(if (require 'browse-kill-ring nil 'noerror)
    (general-define-key "s-V" 'browse-kill-ring)
  (general-define-key "s-V" '(lambda ()
                               (interactive)
                               (popup-menu 'yank-menu))))
#+end_src

** l L
** c C
Comment or uncomment a line or region.
#+begin_src emacs-lisp
(global-unset-key (kbd "s-C"))
(general-define-key "s-C" 'comment-line
                    "M-s-c" 'comment-or-uncomment-region)
#+end_src
** w W                                                               :buffer:
#+begin_src emacs-lisp
(global-unset-key (kbd "s-w"))
(general-define-key "s-w" 'kill-current-buffer)

(general-def org-src-mode-map
  "s-w" 'org-edit-src-exit)
#+end_src
** k K
#+begin_src emacs-lisp
(global-unset-key (kbd "s-k"))
#+end_src
** h H
** g G                                                               :search:
#+begin_src emacs-lisp
(general-define-key "s-G" 'isearch-repeat-backward)
#+end_src
** f F                                                           :search:org:
Remaping for org-mode. The meta key is maped to fn-key, with cursor it behaves diffrent.
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'org-mode-map
 ;; forword right
 "C-f" 'org-metaright
 )
#+end_src

#+begin_src emacs-lisp
(general-define-key  "s-F r" 'isearch-forward-regexp)
;; (nk/check-package 'swiper (lambda ()(general-define-key
;;                                      "s-F s" 'swiper-isearch
;;                                      "s-F S" 'swiper-isearch-backward
;;                                      "s-F 7" 'swiper-mc) ))

(if (require  'avy
              nil 'noerror)
    (general-define-key
     "s-F a" 'avy-goto-char)

  (if (require  'ace-jump-mode nil 'noerror)
      (general-define-key
       "s-F a" 'ace-jump-char-mode)
    (message "neo-keybinding missing package: avy or ace-jump-mode")))
#+end_src
** q Q
** ß ẞ
* Center Row
** u U
Idea:
- s-U *Main menu | Navigate | Go to Super Method*
** i I
** a A
** e E
** o O
#+begin_src emacs-lisp
(global-unset-key (kbd "s-o"))
;;(general-define-key "s-o" 'counsel-find-file)

(general-define-key :prefix "s-O"
                    "p" 'ns-open-file-using-panel
                    "m" 'execute-extended-command)

(general-def ido-mode-map
  :prefix "s-O"
  "r" 'recentf-ido-find-file
  "f" 'find-file)

(general-def ivy-mode-map
  :prefix "s-O"
  "r" 'counsel-recentf
  "f" 'counsel-find-file)

(general-def org-mode-map
  "s-o" 'counsel-imenu)

(general-def org-mode-map
  :prefix "s-O"
  "o" 'org-open-at-point
  "s" 'org-edit-special)
#+end_src
** s S
** n N                                                                  :org:
#+begin_src emacs-lisp
(global-unset-key (kbd "s-n"))
#+end_src
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'org-mode-map
 ;; next down
 "C-n" 'org-metadown
 )
#+end_src
** r R
** t T
** d D
#+begin_src emacs-lisp
(global-unset-key (kbd "s-d"))
(general-define-key "s-d" 'duplicate-line-or-region)
#+end_src
** y Y
* Lower Row
** ü Ü
** ö Ö
** ä Ä
Cursor Jumps [[https://github.com/abo-abo/avy][Avy-Mode]] like [[https://github.com/winterTTr/ace-jump-mode][Ace-Jump-Mode]]
#+begin_src emacs-lisp
(general-define-key
 "s-ä" 'avy-goto-char
 "s-Ä n" 'avy-goto-char-2
 "s-Ä l" 'avy-goto-line
 "s-Ä w" 'avy-goto-word-1
 "s-Ä o" 'avy-org-goto-heading-timer
 )
#+end_src
** p P                                                                  :org:
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'org-mode-map
 ;; previous up
 "C-p" 'org-metaup
 )
#+end_src
** z Z                                                            :undo:redo:
  - =C-z   = undo
  - =C-S-z = redo
  - =C-x u = Show the undo-tree

    #+begin_src emacs-lisp
(nk/check-package 'undo-tree
                  (lambda () (global-unset-key (kbd "C-/"))
                    (global-unset-key (kbd "C-_"))
                    (general-define-key "C-z" 'undo-tree-undo
                                        "C-Z" 'undo-tree-redo
                                        "s-Z" 'undo-tree-redo)))
    #+end_src

** b B                                                                  :org:
#+begin_src emacs-lisp
(general-define-key
 :keymaps 'org-mode-map
 ;; backward left
 "C-b" 'org-metaleft
 )
#+end_src
** m M
The keybinding =C-m= effects a =return=, and I think that's a bug.
#+begin_src emacs-lisp
(define-key input-decode-map [?\C-m] [C-m])
;;(general-define-key "<C-m>" '(lambda () (interactive) (message "C-m is not the same as RET any more!")))
#+end_src
** , –
** . •
** j J                                                            :join:line:
*C-S-j*
Join this line to previous and fix up whitespace at join.
#+begin_src emacs-lisp
(general-define-key "C-S-j" 'join-line
                    "s-J" 'join-line)
#+end_src


* Space Return Backspace Delete Up Down Right Left
** return
#+begin_src emacs-lisp
(general-define-key
 ;; NOTE: keymaps specified with :keymaps must be quoted
 :keymaps 'org-mode-map
 "s-<return>" 'org-meta-return
 )
#+end_src
** Cursor up down                                                 :text:move:
#+begin_src emacs-lisp
(nk/check-package 'move-text (lambda () (general-define-key
                                         "s-S-<up>"  'move-text-up
                                         "s-S-<down>"  'move-text-down)))
#+end_src
