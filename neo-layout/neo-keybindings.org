* Package Genaral
  This package is mendatory for this configuration.
  #+begin_src emacs-lisp
    (if (require 'general nil 'noerror)
        (require 'general)
      (unless (package-installed-p 'general)
        (package-install 'general)))
  #+end_src
* Tastenk√ºrzel
  - =C      = Shorthand for the ctrl-key
  - =M      = Shorthand for the meta-key (bound to cmd on my mac settings)
  - =S      = Shorthand for the shift-key
  - =H      = Shorthand for the fn-key
  - =A      = Shorthand for the alt(option)-key
  - =s      = Shorthand for the super-key

    #+begin_src emacs-lisp
      (general-define-key
       "C-<f11>" '(lambda () (interactive)(setq mac-option-modifier 'none) (message "Modifier Option set to none"))
       "s-<f11>" '(lambda () (interactive)(setq mac-option-modifier 'alt) (message "Modifier Option set to alt"))
      )
    #+end_src

** Editing
*** Select Text and Fast
    - =C-A-u   = Set mark at where point is, clear mark, or jump to mark.
    - =A-up    = Increase selected region by semantic units.
    - =A-down  = Contract the selected region to its previous size.
    - =A-C-g   = Mark next like this
    - =A-C-h   = Mark previous like this
    - =C-c m c = Add one cursor to each line of the active region.
    - =C-c m a = Find and mark all the parts of the buffer matching the currently active region
    - =M-S-f   = Marks one word forward
    - =M-S-b   = Marks one word backward
    - =M-h     = Move point to the beginning of the current *paragraph*, and set mark at the end.

    #+begin_src emacs-lisp
      (global-unset-key (kbd "A-<tab>"))
      (global-unset-key (kbd "C-@"))
      (global-unset-key (kbd "M-SPC"))
      (global-unset-key (kbd "M-@"))

      (general-define-key  "A-C-u" 'set-mark-command)
      (general-define-key  "M-SPC" 'set-mark-command)
      (general-define-key  "s-SPC" 'set-mark-command)


      (nk/check-package 'expand-region
                        (lambda () (general-define-key
                                    "A-<up>"  'er/expand-region
                                    "A-<down>" 'er/contract-region))
                        )

      (nk/check-package 'multiple-cursors
                        (lambda () (general-define-key
                                    "C-c m c" 'mc/edit-lines
                                    "A-C-g" 'mc/mark-next-like-this
                                    "A-C-h" 'mc/mark-previous-like-this
                                    "C-c m a" 'mc/mark-all-like-this)))

      (general-define-key "s-<right>" 'move-end-of-line
                          "s-<left>" 'move-beginning-of-line)
    #+end_src
*** Duplicate Line or Region
    *C-c d*
    Duplicate current line or selected block
    #+begin_src emacs-lisp
      (defun duplicate-line-or-region (&optional n)
        "Duplicate current line, or region if active.
      With argument N, make N copies.
      With negative N, comment out original line and use the absolute value."
        (interactive "*p")
        (let ((use-region (use-region-p)))
          (save-excursion
            (let ((text (if use-region        ;Get region if active, otherwise line
                            (buffer-substring (region-beginning) (region-end))
                          (prog1 (thing-at-point 'line)
                            (end-of-line)
                            (if (< 0 (forward-line 1)) ;Go to beginning of next line, or make a new one
                                (newline))))))
              (dotimes (i (abs (or n 1)))     ;Insert N times, or once if not specified
                (insert text))))
          (if use-region nil                  ;Only if we're working with a line (not a region)
            (let ((pos (- (point) (line-beginning-position)))) ;Save column
              (if (> 0 n)                             ;Comment out original with negative arg
                  (comment-region (line-beginning-position) (line-end-position)))
              (forward-line 1)
              (forward-char pos)))))

    #+end_src
    #+begin_src emacs-lisp
      (general-define-key "C-c d" 'duplicate-line-or-region)
    #+end_src

*** Upper Lower Case Toggle
    #+begin_src emacs-lisp
      ;; (nk/check-package 'xah-fly-keys
      ;;                   (lambda () (general-define-key "C-S-u" 'xah-toggle-letter-case)))
      (global-unset-key (kbd "s-u"))
      (general-define-key
       "C-S-u" 'xah-toggle-letter-case
       "s-U" 'xah-toggle-letter-case)
    #+end_src
*** Quit Exit
    - =C-g    = Quit out of whatever mess you've gotten yourself into

*** TODO Auto Complete
    #+BEGIN_SRC emacs-lisp
      ;; (global-unset-key (kbd "M-SPC")) ; now used as set-mark-command
    #+end_src
*** Move Text
    #+begin_src emacs-lisp
      (nk/check-package 'move-text (lambda () (general-define-key
                                               "M-S-<up>"  'move-text-up
                                               "M-S-<down>"  'move-text-down)))
    #+end_src
*** Comment line and region
    - =C-S-c = Comment or uncomment current line.
    - =C-A-c = Comment or uncomment each line in the region.
    #+begin_src emacs-lisp
      (global-unset-key (kbd "C-x C-;"))

      (general-define-key
       "C-S-c" 'comment-line
       "C-A-c" 'comment-or-uncomment-region)
    #+end_src
*** Spell Checking
    #+begin_src emacs-lisp
      (nk/check-package 'flyspell-correct
                        (lambda () (general-define-key "C-M-," 'flyspell-correct-wrapper)))
    #+end_src
** General
*** Run A Command By Name
    - =M-x     =
    - =C-xm    =
    - =C-x C-m =
    #+begin_src emacs-lisp
      ;; Smart M-x
      ;; (nk/check-package 'smex (lambda ()  (general-define-key "M-x" 'smex
      ;;                                                        "\C-xm" 'smex
      ;;                                                        "M-X" 'smex-major-mode-commands
      ;;                                                        "\C-x\C-m" 'smex-major-mode-commands
      ;;                                                        "C-c C-c M-x" 'execute-extended-command)))
      (general-define-key "M-x" 'smex
                          "\C-xm" 'execute-extended-command
                          "M-X" 'execute-extended-command
                          "\C-x\C-m" 'execute-extended-command
                          "s-A" 'execute-extended-command
                          )
    #+end_src
*** TODO Recenter
*** Open Files in Buffer and Project Management
    #+begin_src emacs-lisp
      (general-define-key
       "C-x f" 'recentf-ido-find-file
       "C-x F r" 'recentf-ido-find-file
       "C-x F w" 'ido-find-file-other-window
       )

      (general-define-key
       "C-x F p" 'projectile-command-map
       "C-c p" 'projectile-command-map)
    #+end_src
*** Relly Quite
    #+begin_src emacs-lisp
      (global-unset-key (kbd "C-x C-c"))
      (general-define-key  "C-x r q" 'save-buffers-kill-terminal)
    #+end_src
** Appearance
*** Text Scale remapping keybindings
    #+BEGIN_SRC emacs-lisp
      (general-define-key "C-x C-A-b" 'text-scale-increase
                          "C-x C-A-t" 'text-scale-decrease)
    #+END_SRC
*** View Mode
    #+begin_src emacs-lisp
      (nk/check-package 'olivetti (lambda () (general-define-key "<f7>" 'olivetti-mode)))
    #+end_src
** TODO Usage Search
** Navigation
*** Move more quickly
    #+begin_src emacs-lisp
      (global-set-key (kbd "C-S-<down>")
                      (lambda ()
                        (interactive)
                        (ignore-errors (next-line 5))))


      (global-set-key (kbd "C-S-<up>")
                      (lambda ()
                        (interactive)
                        (ignore-errors (previous-line 5))))

      (global-set-key (kbd "C-S-<right>")
                      (lambda ()
                        (interactive)
                        (ignore-errors (forward-char 5))))

      (global-set-key (kbd "C-S-<left>")
                      (lambda ()
                        (interactive)
                        (ignore-errors (backward-char 5))))

      (global-set-key (kbd "C-S-a")
                      (lambda ()
                        (interactive)
                        (ignore-errors (next-line 5))))

      (global-set-key (kbd "C-S-l")
                      (lambda ()
                        (interactive)
                        (ignore-errors (previous-line 5))))

      (global-set-key (kbd "C-S-e")
                      (lambda ()
                        (interactive)
                        (ignore-errors (forward-char 5))))

      (global-set-key (kbd "C-S-i")
                      (lambda ()
                        (interactive)
                        (ignore-errors (backward-char 5))))


    #+end_src


*** File Structure
    =C-<F12>  =
    Shows quick jumping points of the structure in the file.
    #+begin_src emacs-lisp
      (general-define-key "C-<f12>" 'imenu)
      (general-define-key "C-S-<f12>" 'imenu-anywhere)
    #+end_src
*** Switch buffer
    - =s-e     =
    - =C-x C-b =
    - =C-x b   =
    Switch to another buffer.
    #+begin_src emacs-lisp
      (global-unset-key (kbd "s-e"))
      (general-define-key "s-e" 'ido-switch-buffer
                          "C-x C-b" 'ibuffer
                          "C-x b" 'ido-switch-buffer)
    #+end_src
*** Next highlighted error
    #+begin_src emacs-lisp
      (general-define-key "<f5>" 'next-error)
    #+end_src
*** Go Back/Foward
    - =C-x <left>    = Go Back current buffer
    - =C-x <right>   = Go Forward current buffer
    - =C-x C-<left>  = Go Back over buffers
    - =C-x C-<right> = Go Forward over buffers

*** Jump to other Window
    - =A-S-<up>    = jump a window up
    - =A-S-<down>  = jump a window down
    - =A-S-<left>  = jump a window left
    - =A-S-<right> = jump a window right
    #+begin_src emacs-lisp
      (nk/check-package 'windmove (lambda ()
                                    (general-define-key "<A-S-right>" 'windmove-right
                                                        "<A-S-left>" 'windmove-left
                                                        "<A-S-up>" 'windmove-up
                                                        "<A-S-down>" 'windmove-down) ))
    #+end_src

*** New Window
    #+begin_src emacs-lisp
      (defun split-window-right-and-move-there-dammit ()
        (interactive)
        (split-window-right)
        (windmove-right))

      (global-set-key (kbd "C-x 3") 'split-window-right-and-move-there-dammit)
    #+end_src
*** Macro Step jumps into source code (lisp)
    Zeigt den Inhalt von elip Funktionen.
    #+BEGIN_SRC emacs-lisp
      (if (require 'macrostep nil 'noerror)
          (require 'macrostep)
        (message "neo-keybinding missing package: macrostep"))
    #+END_SRC
*** Tool Windows
**** Neo Tree lists files
     See documentation and [[https://github.com/jaypei/emacs-neotree][key-bindings]].
     #+BEGIN_SRC emacs-lisp
       (nk/check-package 'neotree (lambda ()
                                    (general-define-key "s-1" 'neotree-toggle)))
     #+END_SRC
*** Goto Line
    - =M-g M-g   = goto line number and shows line numbers
    #+begin_src emacs-lisp
      (global-set-key [remap goto-line] 'goto-line-with-feedback)
    #+end_src

** Search Replace Highlight
*** Highlight Symbols Phrases ...
    - =F6   = Highlight a Symbol under the cursor
    - =C-F6 = Highlight a Search Pattern with custome color
    #+begin_src emacs-lisp
      (general-define-key "<f10>" 'highlight-symbol-at-point
                          "C-<f10>" 'highlight-phrase)
    #+end_src
*** Searching
    - =C-S   =
    #+begin_src emacs-lisp
      (nk/check-package 'swiper (lambda ()(general-define-key
                                           "C-S-s" 'swiper-isearch
                                           "C-S-r" 'swiper-isearch-backward
                                           "C-7" 'swiper-mc) ))
    #+end_src
** Live Templates
** Version Control System
** Refactoring
** Debugging
** Compile and Run

** Magnars
*** Files

    -  =C-x C-f= Open a file. Starts in the current directory
    -  =C-x f  = Open a recently visited file
    -  =C-x o  = Open a file in the current project (based on .git ++)
    -  =C-x C-s= Save this file
    -  =C-x C-w= Save as ...
    -  =C-x C-j= Jump to this files' current directory
    -  =C-x b  = Switch to another open file (buffer)
    -  =C-x C-b= List all open files (buffers)

*** Cut copy and paste

    -  =C-space= Start marking stuff. C-g to cancel.
    -  =C-w    = Cut (aka kill)
    -  =C-k    = Cut till end of line
    -  =M-w    = Copy
    -  =C-y    = Paste (aka yank)
    -  =M-y    = Cycle last paste through previous kills
    -  =C-x C-y= Choose what to paste from previous kills
    -  =C-@    = Mark stuff quickly. Press multiple times

*** General

    -  =C-g    = Quit out of whatever mess you've gotten yourself into
    -  =M-x    = Run a command by name
    -  =C-.    = Autocomplete
    -  =C-_    = Undo
    -  =M-_    = Redo
    -  =C-x u  = Show the undo-tree
    -  =C-x m  = Open magit. It's a magical git interface for emacs

*** Navigation

    -  =C-arrow= Move past words/paragraphs
    -  =C-a    = Go to start of line
    -  =C-e    = Go to end of line
    -  =M-g M-g= Go to line number
    -  =C-x C-i= Go to symbol
    -  =C-s    = Search forward. Press =C-s= again to go further.
    -  =C-r    = Search backward. Press =C-r= again to go further.

*** Window management

    -  =C-x 0  = Close this window
    -  =C-x 1  = Close other windows
    -  =C-x 2  = Split window horizontally
    -  =C-x 3  = Split window vertically
    -  =S-arrow= Jump to window to the left/right/up/down

*** Help

    -  =F1 t   = Basic tutorial
    -  =F1 k   = Help for a keybinding
    -  =F1 r   = Emacs' extensive documentation

** Color Themes
   #+begin_src emacs-lisp
     (general-define-key
      "S-<f2>" '(lambda () (interactive) (color-theme-sanityinc-solarized-light) (nk/after-theme-changed))
       "s-<f2>" '(lambda () (interactive) (disable-all-custom-themes) (nk/after-theme-changed))
       "S-<f1>" '(lambda () (interactive) (load-theme 'nord) (nk/after-theme-changed))
       "s-<f1>" '(lambda () (interactive) (color-theme-sanityinc-solarized-dark) (nk/after-theme-changed))
      )
     ;(set-background-color "floral white")
     ;(eval-after-load "color-theme" '(nk/after-theme-changed))
   #+end_src
** TODO Ido Preview

   (use-package ido-preview       :defer t  :load-path "site-lisp"
   :config
   (add-hook 'ido-setup-hook
   (lambda()
   (define-key ido-completion-map (kbd "C-M-p") (lookup-key ido-completion-map (kbd "C-p")))
   ; currently, this makes nothing. Maybe they'll make C-n key lately.
   (define-key ido-completion-map (kbd "C-M-n") (lookup-key ido-completion-map (kbd "C-n")))
   (define-key ido-completion-map (kbd "C-p") 'ido-preview-backward)
   (define-key ido-completion-map (kbd "C-n") 'ido-preview-forward)))

   )

* Info Keybinding Grep s-
s-<f1>
s-<f2>
s-<f3>
s-<f4>
s-<f5>
s-<f6>
s-<f7>
s-<f8>
s-<f9>
s-<f10>
s-<f11>
s-<f12>



s-1             neotree-toggle
s-2
s-3
s-4
s-5
s-6
s-7
s-8
s-9
s-0
s--             center-line

s-x             kill-region
s-v             yank
s-l             goto-line
s-c             ns-copy-including-secondary
s-w             new ido-kill-buffer  (old) delete-frame
s-k             kill-current-buffer
s-h             ns-do-hide-emacs
s-g             isearch-repeat-forward
s-f
s-f             isearch-forward
s-q             save-buffers-kill-emacs
s-√ü

s-u
s-i
s-a             mark-whole-buffer
s-e             ido-switch-buffer
s-o             ns-open-file-using-panel
s-s             save-buffer
s-n             make-frame
s-r
s-t             ns-popup-font-panel
s-d             isearch-repeat-backward
s-y             ns-paste-secondary

s-√º
s-√∂
s-√§
s-p             ns-print-buffer
s-z             undo
s-b
s-m             iconify-frame
s-,             customize
s-.
s-j             exchange-point-and-mark

s-SPC           set-mark-command

s-¬∞
s-¬ß
s-‚Ñì
s-¬ª
s-¬´
s-$
s-‚Ç¨
s-‚Äû
s-‚Äú
s-‚Äù

s-X
s-V
s-L             shell-command
s-C             ns-popup-color-panel
s-W
s-K
s-H             ns-do-hide-others
s-G
s-F
s-Q
s-·∫û



s-S             ns-write-file-using-panel
s-U             xah-toggle-letter-case

s-U
s-i
s-A
s-O
s-S
s-N
s-R
s-T
s-D             dired
s-Y

s-√ú
s-√ñ
s-√Ñ
s-P
s-Z            undo-tree-redo
s-B
s-M            manual-entry
s-‚Äì
s-‚Ä¢
s-J            join-line


M-s-Àô           M-s-h


s-&             kill-current-buffer
s-'             next-multiframe-window



s-:             ispell
s-?             info

s-^             kill-some-buffers
s-`             other-frame

s-|             shell-command-on-region
s-~             ns-prev-frame
<s-f11>         ??
<s-kp-bar>      shell-command-on-region
<s-left>        move-beginning-of-line
<s-right>       move-end-of-line
M-s-h           ns-do-hide-others
M-s h l         highlight-lines-matching-regexp
